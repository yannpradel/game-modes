/**
* EscapeGame Rounds Script
*/

#Extends "Modes/TrackMania/TM_Rounds_Online.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Settings
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Setting S_ScriptEnvironment "production"
#Setting S_TrustClientSimu False
#Setting S_EnableJoinLeaveNotifications False

//pas sur que ce soit le bon setting Ã  enlever mais je crois que si

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Escape_Game "EscapeGame.LiveRace"
#Const C_EventAnimDuration 5000
#Const C_ShortAnimDuration 250

#Const C_Callback_Team "EscapeSpacePirate.Team"
#Const C_Callback_Teams "EscapeSpacePirate.Teams"

#Const C_Method_Team "EscapeSpacePirate.Servers.Team"
#Const C_Method_Teams "EscapeSpacePirate.Servers.Teams"

#Const C_ImageURL_LiveRanking_Overlay "https://cdn.discordapp.com/attachments/1148369261056757820/1175901454192627843/Live_ranks.png?ex=656cea91&is=655a7591&hm=5a20095b310547e564a3407fcea8dac45a2c1c42f8a51c3f8053bc5fa70c6a5a&"
#Const C_ImageURL_LiveRanking_Arrow "https://cdn.discordapp.com/attachments/922936935155105853/1177245127547293706/Fleches.png?ex=6571cdf6&is=655f58f6&hm=947ea02ba1bcf6c26cc079d02a91a42f798b0c5f10f04c805f22daf585b71020&"
#Const C_ImageURL_Room_1 "https://cdn.discordapp.com/attachments/922936935155105853/1175911664361689168/CurrentR1Status.png?ex=656cf414&is=655a7f14&hm=31jbt1VznyypTWrzvnje2KeKD12USGUkQ6P1erDvglc0pz0mcr8fl0de1e5b87548b4e7985da2897b9&"
#Const C_ImageURL_Room_2 "https://cdn.discordapp.com/attachments/922936935155105853/1175911664583974912/CurrentR2Status.png?ex=656cf414&is=655a7f14&hm=2c6564f3de7484265022f7fb307f89471b1bd441101115bf6db5f1b5ade512dd&"
#Const C_ImageURL_Room_3 "https://cdn.discordapp.com/attachments/922936935155105853/1175911690831925398/CurrentR3Status.png?ex=656cf41a&is=655a7f1a&hm=34cfd0c145nEVR515JsB8NB94DYmA4W8NDTNYhAQw23f20c9edb3bd34cab8e911&"
#Const C_ImageURL_Room_4 "https://cdn.discordapp.com/attachments/922936935155105853/1175911690550915165/CurrentR4Status.png?ex=656cf41a&is=655a7f1a&hm=37412424ec2845473a8e54e93ca23d57108e35e4bb1779fc64f8c8bdac085bc4&"
#Const C_ImageURL_Room_5 "https://cdn.discordapp.com/attachments/922936935155105853/1175911689812725770/CurrentR5Status.png?ex=656cf41a&is=655a7f1a&hm=3d143f031b60597cf08df431f1e72539235bdaf23b2b2100f6257f4a77a0f561&"
#Const C_ImageURL_Room_6 "https://cdn.discordapp.com/attachments/922936935155105853/1175911689531691038/CurrentR6Status.png?ex=656cf41a&is=655a7f1a&hm=f7c31e0771adc4a07cae5abebaf2270bfb735e0d892fdbc2721d9dc0a1d5395c&"
#Const C_ImageURL_Room_Cleared "https://cdn.discordapp.com/attachments/922936935155105853/1175911729234976778/Cleared_Status.png?ex=656cf423&is=655a7f23&hm=ea3b5c2fa9c29794b8d1dc2ccd3f06deed242b24ec24da313769367110f60f5d&"
#Const C_ImageURL_Room_Uncleared "https://cdn.discordapp.com/attachments/922936935155105853/1175911729021079595/Uncleared_Status.png?ex=656cf423&is=655a7f23&hm=5870ead4fa46ebacbef025fa61ceb0b9f56d5a1a81f3596663405bd2f94ce70a&"
#Const C_ImageURL_Event_Room_Discovered "https://cdn.discordapp.com/attachments/922936935155105853/1178323804003504188/Notifnewroom.png?ex=6575ba8f&is=6563458f&hm=aad6e01f4b146003e69943baa76239794e3137a06c477d66ff970f51c377a8cd&"
#Const C_ImageURL_Event_Map_Finished "https://cdn.discordapp.com/attachments/922936935155105853/1178309849013039134/Notiffinishedthemap.png?ex=6575ad8f&is=6563388f&hm=a85d69fad4e9b8ab0f36fd67f6ae72eda352909ff0eb761715c7bf9c0b27a187&"

#Struct K_EscapeTeamInfo {
    Text Player1Login;
    Text Player2Login;
    Integer CpPlayer1;
    Integer CpPlayer2;
    Integer RoomNumber;
}

#Struct K_EscapeDisplayTeamInfo {
    Text player1login;
    Text player2login;
    Integer room_number;
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Extends
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

***Match_LoadLibraries***
***
XmlRpc::RegisterCallback(C_Callback_Team, """
* Name: {{{C_Callback_Team}}}
* Type: CallbackArray
* Description: Callback at the beggining to set data and during the match to update cp's
* Data:
	- Version >=2.0.0:
	```
	[
        {
            "Player1Login": player1Login,
            "Player2Login": player2Login,
            "CPPlayer1": cpPlayer1,
            "CPPlayer2": cpPlayer2,
            "RoomNumber": roomNumber
        }
	]
	```
""");

XmlRpc::RegisterMethod(C_Method_Team, """
* Name: {{{C_Method_Team}}}
* Type: TriggerModeScriptEventArray
* Description: One team info received by the server from DataBase
* Data:
	- Version >=2.0.0:
	```
	[
            "player1login": "Fontur",
            "player2login": "Moutronis",
            "room_number": 0
	]
	```
""");

XmlRpc::RegisterMethod(C_Method_Teams, """
* Name: {{{C_Method_Teams}}}
* Type: TriggerModeScriptEventArray
* Description: All teams received by the server from DataBase
* Data:
	- Version >=2.0.0:
	```
	[
		"{
			"Teams": [
				{
					"player1login": "Fontur",
                    "player2login": "Moutronis",
                    "room_number": 0
				}
			]
		}"
	]
	```
""");

StateMgr::Load();
***

***Match_UnloadLibraries***
***
XmlRpc::UnregisterCallback(C_Callback_Team);

XmlRpc::UnregisterMethod(C_Method_Team);
XmlRpc::UnregisterMethod(C_Method_Teams);

StateMgr::Unload();
***

***Match_StartServer***
***
UIModules::UnloadModules(["UIModule_Rounds_SmallScoresTable",
"UIModule_Race_Chrono", //on est sur d'enlever le chrono ?
"UIModule_Race_RespawnHelper",
"UIModule_Race_TimeGap"]);

UsePvECollisions = True;
***


***Match_AfterLoadHud***
***


UIManager.UIAll.PlayerDisableFreeCam = True;
SetML();
***

***Match_InitRound***
***
declare K_EscapeTeamInfo EscapeGameSpacePirate_CurrentTeam = K_EscapeTeamInfo {
    Player1Login = "",
    CpPlayer1 = 0,
    Player2Login = "",
    CpPlayer2 = 0,
    RoomNumber = 1
};

declare netwrite K_EscapeDisplayTeamInfo[] Net_EscapeGameSpacePirate_Teams for Teams[0] = [];
declare netwrite Integer Net_EscapeGame_Live_Ranking_Update for Teams[0] = 0;
declare netwrite Integer Net_EscapeGame_Live_Displayer_CP for Teams[0] = 0;

Race::SetRespawnBehaviour(Race::C_RespawnBehaviour_NeverGiveUp);

***

***Match_StartRound***
***

Net_EscapeGameSpacePirate_Teams = [];

foreach (Key => Player in Players) {
    if (Player == Null) continue;
    if(Key == 0) {
        EscapeGameSpacePirate_CurrentTeam.Player1Login = Player.User.Name;
    }
    
    if(Key == 1 && S_ScriptEnvironment == "production") {
        EscapeGameSpacePirate_CurrentTeam.Player2Login = Player.User.Name;
    }

    else EscapeGameSpacePirate_CurrentTeam.Player2Login = "Moutronis";
}


XmlRpc::SendCallback(C_Callback_Team, [EscapeGameSpacePirate_CurrentTeam.tojson()]);
//UIManager.UIAll.SendChat(EscapeGameSpacePirate_CurrentTeam.Player1Login ^ " & " ^ EscapeGameSpacePirate_CurrentTeam.Player2Login ^ EscapeGameSpacePirate_CurrentTeam.CpPlayer1 ^ EscapeGameSpacePirate_CurrentTeam.CpPlayer2);
***

***Match_Yield***
***

// Manage XmlRpc events
foreach (Event in XmlRpc.PendingEvents) {
    if (Event.Type == CXmlRpcEvent::EType::CallbackArray) {

        declare netwrite K_EscapeDisplayTeamInfo[] Net_EscapeGameSpacePirate_Teams for Teams[0] = [];
        declare netwrite Integer Net_EscapeGame_Live_Ranking_Update for Teams[0] = 0;
        
        if(Event.ParamArray1 == C_Method_Teams) {
            if(Event.ParamArray2.count > 0) {
                log("Teams");
                Net_EscapeGameSpacePirate_Teams.fromjson(Event.ParamArray2[0]);
                Net_EscapeGame_Live_Ranking_Update += 1;
            }
        }
    }
}
***

***Match_PlayLoop***
***


//CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
foreach (Event in Race::GetPendingEvents()) {
	// Waypoint
	if (Event.Type == Events::C_Type_Waypoint) {
        if (Event.Player != Null) {
            if(Event.Player.Name == EscapeGameSpacePirate_CurrentTeam.Player1Login) EscapeGameSpacePirate_CurrentTeam.CpPlayer1 += 1;
            else if(Event.Player.Name == EscapeGameSpacePirate_CurrentTeam.Player2Login) EscapeGameSpacePirate_CurrentTeam.CpPlayer2 += 1;

            XmlRpc::SendCallback(C_Callback_Team, [EscapeGameSpacePirate_CurrentTeam.tojson()]);
        }
    }
}

// Manage XmlRpc events
foreach (Event in XmlRpc.PendingEvents) {
    if (Event.Type == CXmlRpcEvent::EType::CallbackArray) {
        if(Event.ParamArray1 == C_Method_Team) {
            
            declare netwrite Integer Net_EscapeGame_Live_CP_Update for Teams[0] = 0;

            declare netwrite Text Net_EscapeGame_Live_Displayer_Name_1 for Teams[0] = "";
            declare netwrite Text Net_EscapeGame_Live_Displayer_Name_2 for Teams[0] = "";
            declare netwrite Integer Net_EscapeGame_Live_Displayer_CP for Teams[0] = 0;

            declare netwrite K_EscapeDisplayTeamInfo[] Net_EscapeGameSpacePirate_Teams for Teams[0] = [];
            declare netwrite Integer Net_EscapeGame_Live_Ranking_Update for Teams[0] = 0;

            Net_EscapeGame_Live_Displayer_Name_1 = Event.ParamArray2[0];
            Net_EscapeGame_Live_Displayer_Name_2 = Event.ParamArray2[1];
            Net_EscapeGame_Live_Displayer_CP = TL::ToInteger(Event.ParamArray2[2]);

            foreach(Index => TeamInfo in Net_EscapeGameSpacePirate_Teams) {
                if(TeamInfo.player1login == Net_EscapeGame_Live_Displayer_Name_1 && TeamInfo.player2login == Net_EscapeGame_Live_Displayer_Name_2) {

                    Net_EscapeGameSpacePirate_Teams[Index] = K_EscapeDisplayTeamInfo{
                        player1login = TeamInfo.player1login,
                        player2login = TeamInfo.player2login,
                        room_number = Net_EscapeGame_Live_Displayer_CP
                    };

                    Net_EscapeGame_Live_CP_Update += 1;
                }
            }

            declare Integer SizeTeam = Net_EscapeGameSpacePirate_Teams.count - 1;
            declare K_EscapeDisplayTeamInfo Temp_Team;

            //bubble sort
            for (I, 0, SizeTeam - 1) {
                for (j, 0, SizeTeam - I - 1) {
                    if (Net_EscapeGameSpacePirate_Teams[j].room_number < Net_EscapeGameSpacePirate_Teams[j + 1].room_number) {
                        Temp_Team = Net_EscapeGameSpacePirate_Teams[j];
                        Net_EscapeGameSpacePirate_Teams[j] = Net_EscapeGameSpacePirate_Teams[j + 1];
                        Net_EscapeGameSpacePirate_Teams[j + 1] = Temp_Team;
                    }
                }
            }
            Net_EscapeGame_Live_Ranking_Update += 1;
        }
    }
}
***

Text[] GetAllAssets() {
    declare Text[] Assets = [
        C_ImageURL_LiveRanking_Overlay,
        C_ImageURL_LiveRanking_Arrow,
        C_ImageURL_Room_1,
        C_ImageURL_Room_2,
        C_ImageURL_Room_3,
        C_ImageURL_Room_4,
        C_ImageURL_Room_5,
        C_ImageURL_Room_6,
        C_ImageURL_Room_Cleared,
        C_ImageURL_Room_Uncleared,
        C_ImageURL_Event_Room_Discovered,
        C_ImageURL_Event_Map_Finished
    ];

    return Assets;
}


Void SetML() {
// load all images to load them with one esc keyboard press
    declare Text Quads;
    foreach (Asset in GetAllAssets()) {
        Quads ^= """<quad image="{{{Asset}}}" hidden=1 size="0 0"/>""";
    }

    declare Text Manialink = """
        <manialink version="3" name="{{{C_Escape_Game}}}">
        <stylesheet>
            <style class="center" halign="center" valign="center" textcolor="ffffffff" />
        </stylesheet>
        <framemodel id="framemodel-team-cps">
            <frame id="frame-team-cps">
                <label id="label-press" pos="-25.5 90" z-index="-1" opacity="1" textcolor="00ff00ff" size="200 4.2" text="PRESS" textsize="2" textfont="RajdhaniMono" halign="right"/>
                <label id="label-escape" pos="25 90" z-index="-1" opacity="1" textcolor="ffff00ff" size="200 4.2" text="ESCAPE" textsize="2" textfont="RajdhaniMono" halign="right"/>
                <quad id="quad-room-1" pos="-144.29 90.3" z-index="0" size="35 10.1" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_Room_1}}}"/>
                <quad id="quad-room-2" pos="-93.57 97" z-index="0" size="35 10.1" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_Room_Uncleared}}}"/>
                <quad id="quad-room-3" pos="-42.86 97" z-index="0" size="35 10.1" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_Room_Uncleared}}}"/>
                <quad id="quad-room-4" pos="7.86 97" z-index="0" size="35 10.1" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_Room_Uncleared}}}"/>
                <quad id="quad-room-5" pos="58.57 97" z-index="0" size="35 10.1" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_Room_Uncleared}}}"/>
                <quad id="quad-room-6" pos="109.29 97" z-index="0" size="35 10.1" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_Room_Uncleared}}}"/>
            </frame>
        </framemodel>
        <framemodel id="framemodel-event">
            <quad id="quad-background" z-index="-1" size="44.46 20.93" bgcolor="000" opacity="1" halign="center" valign="center" image="{{{C_ImageURL_Event_Room_Discovered}}}"/>
            <label id="label-event-name-1" text="" textcolor="ffffffff" scriptevents=2 pos="-14 2.8" valign="center2" halign="left" textsize="4.3" textfont="RajdhaniMono"/>
			<label id="label-event-name-2" text="" textcolor="ffffffff" scriptevents=2 pos="-14 -2.3" valign="center2" halign="left" textsize="4.3" textfont="RajdhaniMono"/>
        </framemodel>
        <framemodel id="framemodel-arrow">
            <quad id="quad-arrow-display" opacity="0.8" scriptevents="1" pos="-83 20" z-index="0" size="7 11.2" image="{{{C_ImageURL_LiveRanking_Arrow}}}"/>
        </framemodel>
        <framemodel id="framemodel_live_ranking">
            <label id="label-current-cp-0" pos="-71.7 20.1" z-index="0" textcolor="ffffffff" size="200 4.2" text="0" textsize="14" textfont="RajdhaniMono" halign="right"/>
            <label id="label-current-cp" pos="-64.4 20.1" z-index="0"  textcolor="ffffffff" size="200 4.2" text="1" textsize="14" textfont="RajdhaniMono" halign="right"/>
            <quad id="quad-overlay" pos="-159 12" z-index="0" size="100 57" bgcolor="FFF" image="{{{C_ImageURL_LiveRanking_Overlay}}}"/>
            <frame id="frame-players-in-team" pos="-159 -13">
                <frameinstance modelid="players" pos="0 20"/>
                <frameinstance modelid="players" pos="0 12.3"/>
                <frameinstance modelid="players" pos="0 4.6"/>
                <frameinstance modelid="players" pos="0 -3.1"/>
            </frame>
        </framemodel>
        <framemodel id="players">
            <label id="label-player-rooms-0" pos="89.3 -10.68" z-index="0" size="200 4.2" textcolor="ffffffff" text="" textsize="4" textfont="RajdhaniMono"/>
            <label id="label-player-rooms" pos="95.35 -10.68" z-index="0" size="200 4.2" textcolor="ffffffff" text="" textsize="4" textfont="RajdhaniMono" halign="right"/>
            <label id="label-player-name" pos="7.5 -11.7" z-index="0" size="200 4.2" textcolor="ffffffff" text="" textsize="2.8" textfont="RajdhaniMono"/>
        </framemodel>
        <frame id="frame-global" hidden=1>
            <frame id="frame-events">
                <frameinstance modelid="framemodel-event" pos="183 55"/> 
            </frame>
            <frame id="frame-ranking" scale="0.8" pos="-33 30">
                <frameinstance modelid="framemodel_live_ranking"/>
            </frame>
            <frame id="frame-arrow-display">
                <frameinstance modelid="framemodel-arrow"/>
            </frame>
            <frameinstance modelid="framemodel-team-cps" pos="0 0" scale="1"/>
            {{{Quads}}}
        </frame>
        <script><!--

            #Include "TextLib" as TL
            #Include "MathLib" as ML
            
            #Const C_AttachId {{{dump(C_Escape_Game)}}}
            #Const C_ShortAnimDuration {{{dump(C_ShortAnimDuration)}}}
            #Const C_EventAnimDuration {{{dump(C_EventAnimDuration)}}}

            #Const C_ImageURL_Room_1 {{{dump(C_ImageURL_Room_1)}}}
            #Const C_ImageURL_Room_2 {{{dump(C_ImageURL_Room_2)}}}
            #Const C_ImageURL_Room_3 {{{dump(C_ImageURL_Room_3)}}}
            #Const C_ImageURL_Room_4 {{{dump(C_ImageURL_Room_4)}}}
            #Const C_ImageURL_Room_5 {{{dump(C_ImageURL_Room_5)}}}
            #Const C_ImageURL_Room_6 {{{dump(C_ImageURL_Room_6)}}}

            #Const C_ImageURL_LiveRanking_Overlay {{{dump(C_ImageURL_LiveRanking_Overlay)}}}
            #Const C_ImageURL_LiveRanking_Arrow {{{dump(C_ImageURL_LiveRanking_Arrow)}}}
            #Const C_ImageURL_Room_Uncleared {{{dump(C_ImageURL_Room_Uncleared)}}}
            #Const C_ImageURL_Room_Cleared {{{dump(C_ImageURL_Room_Cleared)}}}
            #Const C_ImageURL_Event_Room_Discovered {{{dump(C_ImageURL_Event_Room_Discovered)}}}
            #Const C_ImageURL_Event_Map_Finished {{{dump(C_ImageURL_Event_Map_Finished)}}}

            {{{dumptype(K_EscapeDisplayTeamInfo)}}}

            declare CAudioSource G_Sound_New_Room_Current_Team;

            declare Text[] G_RoomImageURLs;

            Void AnimEvent(Text _PlayerName1, Text _PlayerName2, Integer _CP) {
                declare CMlFrame Frame_Event <=> (Page.GetFirstChild("frame-events") as CMlFrame);
                declare CMlLabel Label_Name_1 <=> (Frame_Event.GetFirstChild("label-event-name-1") as CMlLabel);
                declare CMlLabel Label_Name_2 <=> (Frame_Event.GetFirstChild("label-event-name-2") as CMlLabel);
                
                Label_Name_1.Value = _PlayerName1;
                Label_Name_2.Value = _PlayerName2;

                declare CMlQuad Quad_Event_Image <=> (Frame_Event.GetFirstChild("quad-background") as CMlQuad);

                if(_CP == 7) {
                    Quad_Event_Image.ImageUrl = C_ImageURL_Event_Map_Finished;
                }
                else {
                    Quad_Event_Image.ImageUrl = C_ImageURL_Event_Room_Discovered;
                }

                Frame_Event.Visible = True;

                AnimMgr.Flush(Frame_Event);
                AnimMgr.Add(Frame_Event, "<a pos=\"-44.46 0\"/>",C_ShortAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
                AnimMgr.Add(Frame_Event, "<a hidden=1 pos=\"0 0\"/>",Now + C_EventAnimDuration, C_ShortAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
            }

            Void UpdateRanking() {
                declare netread K_EscapeDisplayTeamInfo[] Net_EscapeGameSpacePirate_Teams for Teams[0] = [];
                declare CMlFrame Frame_TeamRanking <=> (Page.GetFirstChild("frame-players-in-team") as CMlFrame);

                foreach (Key => Frame_ in Frame_TeamRanking.Controls) {
                    if (!Frame_TeamRanking.Controls.existskey(Key)) break;
                    if (!Net_EscapeGameSpacePirate_Teams.existskey(Key)) break;

                    declare CMlFrame Frame = Frame_ as CMlFrame;
                    declare CMlLabel Label_Player_Name <=> (Frame.GetFirstChild("label-player-name") as CMlLabel);
                    declare CMlLabel Label_Player_Rooms <=> (Frame.GetFirstChild("label-player-rooms") as CMlLabel);
                    declare CMlLabel Label_Player_Rooms_0 <=> (Frame.GetFirstChild("label-player-rooms-0") as CMlLabel);

                    if (Net_EscapeGameSpacePirate_Teams[Key].room_number == 7) {
                        Label_Player_Name.Value = Net1VznyypTWrzvnje2KeKD12USGUkQ6P1erD.player1login ^ " & " ^ Net1VznyypTWrzvnje2KeKD12USGUkQ6P1erD.player2login;
                        
                        Label_Player_Rooms.Value = "G";
                        Label_Player_Rooms_0.Value = "G"; 
                    } 
                    else {
                        if (Net_EscapeGameSpacePirate_Teams[Key].player1login == "" && Net_EscapeGameSpacePirate_Teams[Key].player2login == "") break; //pour Ã©viter d'affiche une team vide (y'a surement mieux)
  
                        Label_Player_Name.Value = Net_EscapeGameSpacePirate_Teams[Key].player1login ^ " & " ^ Net_EscapeGameSpacePirate_Teams[Key].player2login;
                        Label_Player_Rooms.Value = TL::ToText(Net_EscapeGameSpacePirate_Teams[Key].room_number);
                        Label_Player_Rooms_0.Value = "0";
                    }
                }
            }

            Void UpdateTeamRooms(Integer _IndexRoom) { //pas opti
                if (_IndexRoom == 7) {
                    declare CMlQuad Quad_Room_Image <=> (Page.GetFirstChild("quad-room-6") as CMlQuad);
                    AnimMgr.Flush(Quad_Room_Image);
                    AnimMgr.Add(Quad_Room_Image, "<a pos=\""^Quad_Room_Image.RelativePosition_V3.X^" "^95.5^ "\" />",1000, CAnimManager::EAnimManagerEasing::QuadOut);

                    Quad_Room_Image.ImageUrl = C_ImageURL_Room_Cleared;
                    declare CMlLabel Label_Team_Rooms <=> (Page.GetFirstChild("label-current-cp") as CMlLabel);
                    declare CMlLabel Label_Team_Rooms_0 <=> (Page.GetFirstChild("label-current-cp-0") as CMlLabel);
                    Label_Team_Rooms.Value = "X";
                    Label_Team_Rooms_0.Value = "X";
                    return;
                }
                if (_IndexRoom == 2) { //on enleve les textes si il a passÃ© une premiere room (c'est nul mais j'arrive pas Ã  faire autrement pour l'instant)
                    declare CMlLabel Label_Press <=> (Page.GetFirstChild("label-press") as CMlLabel);
                    declare CMlLabel Label_Escape <=> (Page.GetFirstChild("label-escape") as CMlLabel);

                    Label_Press.Visible = False;
                    Label_Escape.Visible = False;
                }
                if (_IndexRoom > 7) return;

                G_Sound_New_Room_Current_Team.Play();

                declare CMlQuad Quad_Room_Image <=> (Page.GetFirstChild("quad-room-"^ _IndexRoom-1 ^ "") as CMlQuad);
                declare CMlQuad Quad_NextRoom_Image <=> (Page.GetFirstChild("quad-room-"^ _IndexRoom ^ "") as CMlQuad);

                AnimMgr.Flush(Quad_Room_Image);
                AnimMgr.Add(Quad_Room_Image, "<a pos=\""^Quad_Room_Image.RelativePosition_V3.X^" "^95.5^ "\" />",1000, CAnimManager::EAnimManagerEasing::QuadOut);

                Quad_Room_Image.ImageUrl = C_ImageURL_Room_Cleared;
 
                AnimMgr.Flush(Quad_NextRoom_Image);
                AnimMgr.Add(Quad_NextRoom_Image, "<a pos=\""^Quad_NextRoom_Image.RelativePosition_V3.X^" "^90.3^ "\" />",1000, CAnimManager::EAnimManagerEasing::QuadOut);

                if (_IndexRoom >= 1 && _IndexRoom < 7) {
                    Quad_NextRoom_Image.ImageUrl = G_RoomImageURLs[_IndexRoom-1];
                }

                declare CMlLabel Label_Team_Rooms <=> (Page.GetFirstChild("label-current-cp") as CMlLabel);
                Label_Team_Rooms.Value = TL::ToText(_IndexRoom);
            }

            main() {
                log("Init " ^ C_AttachId);

                declare CMlFrame Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

                G_RoomImageURLs = [C_ImageURL_Room_1, C_ImageURL_Room_2, C_ImageURL_Room_3, C_ImageURL_Room_4, C_ImageURL_Room_5, C_ImageURL_Room_6];
                G_Sound_New_Room_Current_Team = Audio.CreateSound("https://cdn.discordapp.com/attachments/922936935155105853/1177294673149169684/a.wav", 12.0, False, False, False);

                wait (InputPlayer != Null);

                Frame_Global.Visible = True;

                declare netread Integer Net_EscapeGame_Live_CP_Update for Teams[0] = 0;
                declare netread Integer Net_EscapeGame_Live_Ranking_Update for Teams[0] = 0;

                declare Integer Last_CP_Update = Net_EscapeGame_Live_CP_Update;
                declare Integer Last_Update = Net_EscapeGame_Live_Ranking_Update;
                declare Integer Last_UpdateTime;

                UpdateRanking();
                //mettre une petite anim qui fait un tuto pour les fleches + l'overlay en gÃ©nÃ©ral + les indices si jamais on en met

                while (True) {
                    yield;

                    if (Net_EscapeGame_Live_CP_Update != Last_CP_Update) {
                        declare netread Integer Net_EscapeGame_Live_Displayer_CP for Teams[0] = 0;
                        declare netread Text Net_EscapeGame_Live_Displayer_Name_1 for Teams[0] = "";
                        declare netread Text Net_EscapeGame_Live_Displayer_Name_2 for Teams[0] = "";


                        if(Net_EscapeGame_Live_Displayer_CP != 1) { //if it's not the first cp
                            AnimEvent(Net_EscapeGame_Live_Displayer_Name_1, Net_EscapeGame_Live_Displayer_Name_2, Net_EscapeGame_Live_Displayer_CP);

                            if (GUIPlayer != Null && (GUIPlayer.User.Name == Net_EscapeGame_Live_Displayer_Name_1 || GUIPlayer.User.Name == Net_EscapeGame_Live_Displayer_Name_2)) { //pas sur si Ã§a suffit
                                UpdateTeamRooms(Net_EscapeGame_Live_Displayer_CP);
                            }
                        }
                        
                        UpdateRanking();
                        Last_CP_Update = Net_EscapeGame_Live_CP_Update;
                    }

                    if (Last_Update != Net_EscapeGame_Live_Ranking_Update) {

                        Last_Update = Net_EscapeGame_Live_Ranking_Update;
                        if (Last_UpdateTime == -1) Last_UpdateTime = Now + 250;
                    }

    
                    if (Last_UpdateTime != -1 && Last_UpdateTime < Now) {
                        Last_UpdateTime = -1;
    
                        UpdateRanking();
                    } //pas sur que ce soit utile dans ce cas

                    foreach(Event in PendingEvents) {
                        if (Event.Control == Null) continue; 
                        declare Quad <=> (Event.Control as CMlQuad);

                        if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "quad-arrow-display") {
                            declare CMlFrame Frame_Event <=> (Page.GetFirstChild("frame-ranking") as CMlFrame);
                            declare CMlFrame Frame_Event_Arrow <=> (Page.GetFirstChild("frame-arrow-display") as CMlFrame);
                            declare CMlQuad Quad <=> (Frame_Event_Arrow.GetFirstChild("quad-arrow-display") as CMlQuad);

                            AnimMgr.Flush(Quad);
                            AnimMgr.Flush(Frame_Event);
                            if(Quad.RelativeRotation == 180.) {
                                Frame_Event.Visible = True;

                                Quad.RelativePosition_V3.Y = 20.;

                                AnimMgr.Add(Quad, "<a pos=\"-83 20\"/>",C_ShortAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
                                AnimMgr.Add(Frame_Event, "<a pos=\"-33 30\"/>",C_ShortAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);

                                Quad.RelativeRotation = 0.;
                            }

                            else {
                                Quad.RelativePosition_V3.Y = 10.;

                                AnimMgr.Add(Frame_Event, "<a hidden=1 pos=\"-120 30\"/>",C_ShortAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
                                AnimMgr.Add(Quad, "<a pos=\"-152 10\"/>",C_ShortAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
                                
                                Quad.RelativeRotation = 180.;
                            }

                        } else if (Event.Type == CMlScriptEvent::Type::MouseOver && Event.ControlId == "quad-arrow-display") {
                            Quad.Opacity = 1.;
                    
                        } else if (Event.Type == CMlScriptEvent::Type::MouseOut && Event.ControlId == "quad-arrow-display") {
                            Quad.Opacity = 0.8;
                        } 
                    }
                }
            }
        --></script>
    </manialink>
    """;

    Layers::Create(C_Escape_Game, Manialink);
    Layers::SetType(C_Escape_Game, CUILayer::EUILayerType::Normal);
    Layers::Attach(C_Escape_Game);
}