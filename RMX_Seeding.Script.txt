//#RequireContext CSmMode
#Extends "Modes/Nadeo/Trackmania/Base/TrackmaniaBase.Script.txt"

#Const	CompatibleMapTypes	"TrackMania\\TM_Race,TM_Race"
#Const	Version							"2023-02-03"
#Const	ScriptName					"Modes/rmxseeding/RMX_Seeding.Script.txt"

#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as MenuConsts
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/TimeGap_Server.Script.txt" as UIModules_TimeGap
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/Checkpoint_Server.Script.txt" as UIModules_Checkpoint
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/PauseMenuOnline_Server.Script.txt" as UIModules_PauseMenu_Online
#Include "Libs/Nadeo/Trackmania/Modes/TimeAttack/StateManager.Script.txt" as StateMgr
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/WarmupHelpers_Server.Script.txt" as WarmupHelpers
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/SpectatorBase_Server.Script.txt" as UIModules_SpectatorBase

#Include "Modes/Libs/RMXTeams.Script.txt" as RMXTeams
#Include "Modes/Libs/RMXMarkers.Script.txt" as RMXMarkers
#Include "Modes/Libs/RMXChrono.Script.txt" as RMXChrono

#Setting S_FinishTimeout 30 as _("Finish timeout")
#Setting S_RoundsPerMap 2 as _("Number of rounds per track")
#Setting S_MapsPerMatch 5 as _("Number of tracks per match")

#Setting S_WarmUpNb 1 as _("Number of warm up")
#Setting S_ScriptEnvironment "production"
#Setting S_UseTieBreak False as _("Use tie-break")	///< Continue to play the map until the tie is broken

#Const C_ModeName "RXM Seeding"
#Const C_Callback_Teams_Serv1 "RMX_QualificationResultServer1"
#Const C_Callback_Teams_Serv2 "RMX_QualificationResultServer2"

#Const C_ManiaAppUrl "file://Media/ManiaApps/Nadeo/Trackmania/Modes/Rounds.Script.txt" //< Url of the mania app

#Const C_UploadRecord True
#Const C_DisplayRecordGhost False
#Const C_DisplayRecordMedal False
#Const C_CelebrateRecordGhost False
#Const C_CelebrateRecordMedal False
#Const C_DisplayWorldTop False
#Const C_ML_RMX_Seeding "RMX_Seeding"


#Const C_ImageURL_LocalRecords "https://i.imgur.com/bBvPZqP.png"
#Const C_ImageURL_LiveRanking "https://i.imgur.com/hpCDItK.png"
#Const C_ImageURL_FondLiveRanking "https://i.imgur.com/oL4cqyd.png"
#Const C_ImageURL_NextPlayer "https://i.imgur.com/cQy8v1B.png"
#Const C_ImageURL_FondTeams "https://i.imgur.com/ZjTEOoP.png"
#Const C_ImageURL_TextTeams "https://i.imgur.com/MLedbii.png"
#Const C_ImageURL_FondLapsCP "https://i.imgur.com/yvLxB66.png"
#Const C_ImageURL_TextLaps "https://i.imgur.com/c161ASU.png"
#Const C_ImageURL_TextCps "https://i.imgur.com/0l7ZYFL.png"
#Const C_ImageURL_UpperImage "https://i.imgur.com/fUxP6xq.png"
#Const C_ImageURL_FondLocalRecords "https://i.imgur.com/ViK5iOn.png"

#Const C_WU_PickingTime 20000 //we time for picking order


***Match_LoadLibraries***
***
XmlRpc::RegisterCallback(C_Callback_Teams_Serv1, """
* Name: {{{C_Callback_Teams_Serv1}}}
* Type: CallbackArray
* Description: Callback at the end of RXM Seeding match which send the result of the qualification to the server 1.
* Data:
	- Version >=2.0.0:
	```
	[
        {
            "Player1Login": player1Login,
            "Player2Login": player2Login,
            "CPPlayer1": cpPlayer1,
            "CPPlayer2": cpPlayer2,
            "RoomNumber": roomNumber
        }
	]
	```
""");

XmlRpc::RegisterCallback(C_Callback_Teams_Serv2, """
* Name: {{{C_Callback_Teams_Serv2}}}
* Type: CallbackArray
* Description: Callback at the end of RXM Seeding match which send the result of the qualification to the server 1.
* Data:
	- Version >=2.0.0:
	```
	[
        {
            "Player1Login": player1Login,
            "Player2Login": player2Login,
            "CPPlayer1": cpPlayer1,
            "CPPlayer2": cpPlayer2,
            "RoomNumber": roomNumber
        }
	]
	```
""");
RMXMarkers::Load();
***

***Match_UnloadLibraries***
***
XmlRpc::UnregisterCallback(C_Callback_Teams_Serv1);
XmlRpc::UnregisterCallback(C_Callback_Teams_Serv2);

***

***Match_LogVersions***
***
Log::RegisterScript(ScriptName, Version);
***

***Match_Rules***
***
ModeInfo::SetName(C_ModeName);
ModeInfo::SetType(ModeInfo::C_Type_MultiTeams);
ModeInfo::SetRules("");
ModeInfo::SetStatusMessage("");
***

***Match_AfterLoadHud***
***

ClientManiaAppUrl = C_ManiaAppUrl;
UIModules_Checkpoint::SetVisibilityTimeDiff(False);
UIModules_TimeGap::SetTimeGapMode(UIModules_TimeGap::C_TimeGapMode_CurRace);
UIModules_Checkpoint::SetRankMode(UIModules_Checkpoint::C_RankMode_CurrentRace);
UIModules_PauseMenu_Online::SetHelp("");

// Hide Overlay
UIModules::UnloadModules(["UIModule_Race_Chrono"]);
UIManager.UIAll.OverlayHideSpectatorControllers = True;
UIManager.UIAll.OverlayHideSpectatorInfos = True;
UIManager.UIAll.OverlayHideChrono = True; 
UIManager.UIAll.OverlayHideCountdown = True;
UIModules_SpectatorBase::HidePlayerName(True); // < Hide Player Name above the Chrono

//hide default markers
UIManager.UIAll.AlliesLabelsVisibility = CUIConfig::ELabelsVisibility::Never;
UIManager.UIAll.AlliesLabelsShowNames = CUIConfig::EVisibility::ForcedHidden;
UIManager.UIAll.TeamLabelsVisibility = CUIConfig::ELabelsVisibility::Never;
UIManager.UIAll.TeamLabelsShowNames = CUIConfig::EVisibility::ForcedHidden;
UIManager.UIAll.OpposingTeamLabelsVisibility = CUIConfig::ELabelsVisibility::Never;
UIManager.UIAll.OpposingTeamLabelsShowNames = CUIConfig::EVisibility::ForcedHidden;
UIManager.UIAll.LabelsVisibility_SkipMarkersOnly = True;

// UIManager.UIAll.LabelsVisibility = CUIConfig::EHudVisibility::MarkersOnly;
Markers::EnablePlayersMarkers(True);
Markers::SetDefaultMarker_Box(<0.,0.,0.>);
RMXMarkers::Markers();

// Chrono
Layers::Create(RMXChrono::C_Id, RMXChrono::GetManialink());
Layers::SetType(RMXChrono::C_Id, CUILayer::EUILayerType::Normal); 
Layers::Attach(RMXChrono::C_Id);

SetMl();
***

***Match_InitServer***
***

log("init Server");
declare netwrite RMXTeams::K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0] = [];
Net_RMX_Seeding_Teams_Config = [];

declare netwrite RMXTeams::K_Team[] Net_RMX_Seeding_Teams_Config_SortedPoints for Teams[0] = [];
Net_RMX_Seeding_Teams_Config_SortedPoints = [];

declare netwrite Integer Net_RMX_Seeding_Display_HUD for Teams[0] = 0;
Net_RMX_Seeding_Display_HUD = -1;

declare netwrite Integer Net_RMX_Teams_Picking_Updates for Teams[0] = 0;
Net_RMX_Teams_Picking_Updates = 0;

***

***Match_StartServer***
***
log("Start Server");
Clans::SetClansNb(0);
CrudeExtrapolation_AllowDelay = False;
Race::SetRespawnBehaviour(Race::C_RespawnBehaviour_NeverGiveUp);
WarmUp::SetAvailability(True);
Scores::SaveInScore(Scores::C_Points_Match);
Race::SortScores(Race::C_Sort_TotalPoints);
//Race::EnableIntroDuringMatch(True);
Race::SetupRecord(
	MenuConsts::C_ScopeType_Season,
	MenuConsts::C_ScopeType_PersonalBest,
	MenuConsts::C_GameMode_Rounds,
	"",
	C_UploadRecord,
	C_DisplayRecordGhost,
	C_DisplayRecordMedal,
	C_CelebrateRecordGhost,
	C_CelebrateRecordMedal,
	C_DisplayWorldTop
);
GiveUpBehaviour_RespawnAfter = True;
CarRank::Reset();
***

***Match_Yield***
***
foreach (Event in PendingEvents) {
	switch (Event.Type) {
		// Initialize players when they join the server
		case CSmModeEvent::EType::OnPlayerAdded: {
			StateMgr::InitializePlayer(Event.Player);
			CarRank::InitializePlayer(Event.Player);
		}
	}
}

StateMgr::Yield();
***


***Match_StartMatch***
***
log("Start Match");

RMXTeams::Clear();
RMXTeams::SetMatchStarted(False);
foreach(Score in Scores){
	ServerAdmin.ForceSpectator(Score.User,CServerAdmin::ESpecMode::PlayerSelectable);
}

foreach (Player in Players) {
  log(Race::GetPlayerDefaultStart(Player));
}

***

***Match_InitMap***
***
	declare netwrite Integer Net_RMX_Seeding_Display_HUD for Teams[0] = 0;

	foreach (Player in Players) {
		declare CUIConfig UI = UIManager.GetUI(Player);
		if (UI == Null) return;
	
		declare netwrite Text Net_RMX_NextPlayer_Player for UI = "";
		Net_RMX_NextPlayer_Player = ""; //we set the next player to empty for all players (even not registered)
	
		declare netwrite Boolean Net_RMX_Teams_Picking_ApplyIsOver for UI = False;
		Net_RMX_Teams_Picking_ApplyIsOver = False;
	}
***



***Match_StartMap***
***

Net_RMX_Seeding_Display_HUD = -1;

StartTime = Now + Race::C_SpawnDuration;
//Do warmup until config is loaded
if(!RMXTeams::GetMatchStarted()){
	UIModules_ScoresTable::SetScoreMode(UIModules_ScoresTable::C_Mode_BestTime);
	WarmUp::SetStartRoundMessage(_("Loading Configuration..."));
	UIModules_ScoresTable::SetFooterInfo(_("Loading Configuration..."));
	
	Scores_ClearAll();
	MB_WarmUp(1,1000,-1);

	//skip and start match
	RMXTeams::SetMatchStarted(True);
	Race::EnableIntroDuringMatch(False);
	
	//sort scoreboard with default team config in order of registration
	
	SetScoreboardDisplay();
	SortScoreboard();
	MB_SetValidMap(False); 

	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
	MB_Sleep(S_ChatTime*800);
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Manual;
	MB_Sleep(S_ChatTime*200);

	declare netwrite RMXTeams::K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0] = [];
	Net_RMX_Seeding_Teams_Config = RMXTeams::GetSortedByPoints();

	declare netwrite RMXTeams::K_Team[] Net_RMX_Seeding_Teams_Config_SortedPoints for Teams[0] = [];
	Net_RMX_Seeding_Teams_Config_SortedPoints = RMXTeams::GetSortedByPoints();
}
//else do real warm-up
{
	SetScoreboardDisplay();

	//yeet to spectator non registered players
	foreach(Score in Scores) {
		if(!RMXTeams::IsRegistered(Score.User)){
			ServerAdmin.ForceSpectator(Score.User,CServerAdmin::ESpecMode::SpectatorSelectable);
		}
	}
	UpdateScoresTableFooter(True);

	foreach (Score in Scores) {
		WarmUp::CanPlay(Score, True);
	}

	Net_RMX_Seeding_Display_HUD = 1;
	WarmUp::SetStartRoundMessage(_("Warmup: %1/%2"));
	MB_WarmUp(S_WarmUpNb, Map.TMObjective_AuthorTime * 2, -1);

	WarmUp::SetStartRoundMessage(_("Please choose your relay order !"));
	Net_RMX_Seeding_Display_HUD = 0;

	foreach (Score in Scores) {
		WarmUp::CanPlay(Score, False);
	}

	MB_WarmUp(1, C_WU_PickingTime, -1);
	Net_RMX_Seeding_Display_HUD = 1;

	declare netwrite RMXTeams::K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0] = [];
	Net_RMX_Seeding_Teams_Config = RMXTeams::GetSortedByPoints();

	declare netwrite RMXTeams::K_Team[] Net_RMX_Seeding_Teams_Config_SortedPoints for Teams[0] = [];
	Net_RMX_Seeding_Teams_Config_SortedPoints = RMXTeams::GetSortedByPoints();
	
}
***

***Match_StartWarmUp***
***
if(!RMXTeams::GetMatchStarted()){
	if (S_ScriptEnvironment == "development") {
		log("CreateFakeTeams");
		RMXTeams::CreateFake();
		EndTime = Now + 1000;
	} else {
		log("load Teams");
		RMXTeams::LoadTeams();
	}
}
***


***Match_StartWarmUpRound***
***
declare netwrite Integer Net_RMX_Seeding_Ranking_Update for Teams[0] = 0;
declare netwrite Integer Net_RMX_Seeding_Upper_Ranking_Update for Teams[0] = 0;

Net_RMX_Seeding_Ranking_Update += 1;
Net_RMX_Seeding_Upper_Ranking_Update += 1;
***

***Match_WarmUpLoop***
***
declare RacePendingEvents = Race::GetPendingEvents();
foreach (Event in RacePendingEvents) {
	if (Event.Player != Null) {
		switch(Event.Type){
			case Events::C_Type_StartLine:{
				if (S_ScriptEnvironment == "development") {
					Event.Player.TrustClientSimu = False;
					//SetPlayerVehicle_ControlledByMode(Event.Player, True);
					//SetPlayerVehicle_Accelerate(Event.Player, True);
					//SetPlayerVehicle_TargetSpeedValue(Event.Player, ML::Rand(230.,250.));
				}
			}

			case Events::C_Type_Waypoint:{
				if (Event.IsEndRace) {
					log("end warmup");
					Scores::UpdatePlayerBestRaceIfBetter(Event.Player);
					Scores::UpdatePlayerPrevRace(Event.Player);

					declare Score <=> RMXTeams::GetScore(Event.Player.Login);
					log(Scores::GetPlayerBestRaceTime(Score));
				}
			}
		}
	}
}

//If the picker chose a player
foreach(Event in UIManager.PendingEvents) {
	if(Event.CustomEventType == "RMX_Order_Randomize") {
		declare CSmPlayer Player = GetPlayer(Event.UI);
		if(RMXTeams::IsRegistered(Player.User)){
			declare RMXTeams::K_Team Team = RMXTeams::Get(Player.User);
			RMXTeams::ShufflePlayers(Team);

			declare netwrite RMXTeams::K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0] = [];
			Net_RMX_Seeding_Teams_Config = RMXTeams::Get();

			declare netwrite Integer Net_RMX_Teams_Picking_Updates for Teams[0] = 0;
			Net_RMX_Teams_Picking_Updates += 1;
		}
	}

	if(Event.CustomEventType == "RMX_Order_ChangeOrder") {
		declare CSmPlayer Player = GetPlayer(Event.UI);
		if(RMXTeams::IsRegistered(Player.User)){
			declare RMXTeams::K_Team Team = RMXTeams::Get(Player.User);
			RMXTeams::ChangeOrder(Team,Player.User,TL::ToInteger(Event.CustomEventData[0]));

			declare netwrite RMXTeams::K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0] = [];
			Net_RMX_Seeding_Teams_Config = RMXTeams::Get();

			declare netwrite Integer Net_RMX_Teams_Picking_Updates for Teams[0] = 0;
			Net_RMX_Teams_Picking_Updates += 1;

		}
	}

	if(Event.CustomEventType == "RMX_Order_Reset") {
		declare CSmPlayer Player = GetPlayer(Event.UI);
		if(RMXTeams::IsRegistered(Player.User)){
			declare RMXTeams::K_Team Team = RMXTeams::Get(Player.User);
			RMXTeams::NoDisplayPlayers(Team);

			declare netwrite RMXTeams::K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0] = [];
			Net_RMX_Seeding_Teams_Config = RMXTeams::Get();

			declare netwrite Integer Net_RMX_Teams_Picking_Updates for Teams[0] = 0;
			Net_RMX_Teams_Picking_Updates += 1;

		}
	}

	if(Event.CustomEventType == "RMX_Order_Apply") {
		declare CSmPlayer Player = GetPlayer(Event.UI);
		if(RMXTeams::IsRegistered(Player.User)){
			declare Team = RMXTeams::Get(Player.User);

			foreach (Player in Team.Players) {
				declare CSmPlayer RealPlayer = GetPlayer(Player.Login);
				   if (RealPlayer == Null) continue;

				declare CUIConfig UI <=> UIManager.GetUI(RealPlayer);
					if (UI == Null) continue;

				declare netwrite Boolean Net_RMX_Teams_Picking_ApplyIsOver for UI = False;
				Net_RMX_Teams_Picking_ApplyIsOver = True;
			}
			RMXTeams::NoDisplayPlayers(Team);
		}
	}
}

if(!RMXTeams::GetMatchStarted()){
	if(S_ScriptEnvironment == "production"){
		if(RMXTeams::LoadTeamsUpdate()){
			EndTime = Now + 4000;
			WarmupHelpers::SetCurrentWarmupEndTime(EndTime);
		}
	}
}


***

***Match_InitRound***
***
declare netwrite RMXTeams::K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0] = [];
declare netwrite RMXTeams::K_Team[] Net_RMX_Seeding_Teams_Config_SortedPoints for Teams[0] = [];
declare netwrite Integer Net_RMX_Seeding_Ranking_Update for Teams[0] = 0;
declare netwrite Integer Net_RMX_Seeding_Upper_Ranking_Update for Teams[0] = 0;
***

***Rounds_CheckCanSpawn***
***
if (!RMXTeams::IsRegistered(Score.User)) return False;
***

***Match_StartRound***
***
UpdateScoresTableFooter(False);
Race::StopSkipOutroAll();
ResetTeamScoreToScoreboard();
Scores::Clear(Scores::C_Level_Round);
UIModules_ScoresTable::SetScoreMode(UIModules_ScoresTable::C_Mode_PrevTime);
SortScoreboard();
RMXTeams::PrepareRound();
//Start race for 1st player of each team, yes
StartTime = Now + Race::C_SpawnDuration;
EndTime = -1;
//yeet to spectator non registered players
foreach(Score in Scores) {
	if(!RMXTeams::IsRegistered(Score.User)){
		log("Spectator non registered player: " ^ Score.User.Name);
		ServerAdmin.ForceSpectator(Score.User,CServerAdmin::ESpecMode::SpectatorSelectable);
	}
	else {
		ServerAdmin.ForceSpectator(Score.User,CServerAdmin::ESpecMode::PlayerSelectable);
	}
}
foreach(Team in RMXTeams::Get()){
	StartTeamPlayer(Team,0,StartTime + 1000);
}
declare FirstFinish = True;

Net_RMX_Seeding_Teams_Config_SortedPoints = RMXTeams::GetSortedByPoints();
Net_RMX_Seeding_Teams_Config = RMXTeams::GetSortedByLapsAndCps();

Net_RMX_Seeding_Upper_Ranking_Update += 1;
Net_RMX_Seeding_Ranking_Update += 1;
***

***Match_PlayLoop***
***
declare RacePendingEvents = Race::GetPendingEvents();
foreach (Event in RacePendingEvents) {
	if (Event.Player != Null) {
		switch(Event.Type){
			case Events::C_Type_StartLine:{
				Event.Player.TrustClientSimu = False;
				if(RMXTeams::IsRegistered(Event.Player.User)){
					declare Team = RMXTeams::Get(Event.Player.User);
					declare PlayerIndex = RMXTeams::GetIndex(Event.Player.User);
					foreach (Player in Team.Players) {
						declare CSmPlayer RealPlayer = GetPlayer(Player.Login);
						if (RealPlayer == Null) continue;

						declare CUIConfig UI <=> UIManager.GetUI(RealPlayer);
						if (UI == Null) return;

						declare netwrite Text Net_RMX_NextPlayer_Player for UI = "";
						if (PlayerIndex+1 < Team.Players.count){
							declare CSmPlayer NextPlayer = GetPlayer(Team.Players[PlayerIndex+1].Login);
							if (NextPlayer == Null) continue;

							Net_RMX_NextPlayer_Player = NextPlayer.User.Name; //we update clients only for registered players
						}
						else Net_RMX_NextPlayer_Player = ""; 
					}
				}		
			}
			case Events::C_Type_Waypoint:{		
				if (Event.IsEndRace) {
					if(RMXTeams::IsRegistered(Event.Player.User)){
						Scores::UpdatePlayerPrevRace(Event.Player);
						declare Team = RMXTeams::Get(Event.Player.User);
						declare PlayerIndex = RMXTeams::GetIndex(Event.Player.User);
						declare TeamTime = RMXTeams::SetFinishedAndAddTime(Event.Player.User);
						RMXTeams::AddLapsTeams(Event.Player.User);
						if(RMXTeams::IsLastPlayer(Event.Player.User)){
							Race::StopSkipScoresTable(Event.Player);
							// Start the countdown if it's the first player to finish
							if (EndTime <= 0) {
								EndTime = Now + S_FinishTimeout * 1000;
							}
						}else{
							Race::StopSkipOutro(Event.Player);
							//StartTeamPlayer(Team,PlayerIndex+1,StartTime + TeamTime + (Race::C_SpawnDuration*(PlayerIndex+1)));
							StartTeamPlayer(Team,PlayerIndex+1,StartTime + TeamTime + (3000*(PlayerIndex+1)));
						}

						declare netwrite Integer Net_RMX_LocalMapRecords_Update for Teams[0] = 0;
						Net_RMX_LocalMapRecords_Update += 1;
					}
					// Change Score
					Scores::UpdatePlayerBestRaceIfBetter(Event.Player);
					Scores::UpdatePlayerPrevRace(Event.Player);
				}
				if(RMXTeams::IsRegistered(Event.Player.User)){
					Scores::UpdatePlayerPrevRace(Event.Player);
					RMXTeams::AddCheckpointsTeams(Event.Player.User);
				}

				declare netwrite Integer Net_RMX_Seeding_Ranking_Update for Teams[0] = 0;
				Net_RMX_Seeding_Teams_Config = RMXTeams::GetSortedByLapsAndCps();
				Net_RMX_Seeding_Ranking_Update += 1;
			}
		}
	}
}

// End the round 
// If All players finished
if (Players.count > 0 && PlayersNbAlive <= 0) {
	MB_StopRound();
}
// If time limit is reached
if (EndTime > 0 && Now >= EndTime) {
	MB_StopRound();
}
***

***Match_EndRound***
***
log("Match_EndRound");

if(MB_Private_SectionValid_Round){

	//TODO: proper aborted round management
	if(MB_GetValidRoundCount() == S_RoundsPerMap){
		MB_StopMap();
	}
	
	EndTime = -1;
	Race::StopSkipOutroAll();
	SetTeamScoreToScoreboard();
	UIModules_ScoresTable::DisplayRoundPoints(True);
	UIModules_ScoresTable::SetScoreMode(UIModules_ScoresTable::C_Mode_Points);
	
	//compute teams points
	//		  Time   [TeamIndex][NbFinish]
	declare Integer[Integer][Integer] LUT;
	foreach(I => Team in RMXTeams::Get()){
		declare NbFinish = RMXTeams::GetTeamNbFinish(Team);
		
		if(!LUT.existskey(NbFinish)) LUT[NbFinish] = [];
		LUT[NbFinish][I] = Team.Time;
	
	}
	LUT = LUT.sortkeyreverse();
	foreach(I => JSP in LUT){
		LUT[I] = LUT[I].sort();
	}
	declare Integer I = 1;
	foreach(TeamsWithNFinish in LUT){
		foreach(TeamIndex => Time in TeamsWithNFinish){
			declare Team = RMXTeams::Get(TeamIndex);
			RMXTeams::AddTeamPoints(TeamIndex,I);
			foreach(Player in Team.Players){
				declare Score <=> RMXTeams::GetScore(Player.Login);
				if(Score != Null){
					Scores::AddPlayerRoundPoints(Score,I);
				}
			}
			I += 1;
		}
	}

	Net_RMX_Seeding_Teams_Config_SortedPoints = RMXTeams::GetSortedByPoints();
	Net_RMX_Seeding_Upper_Ranking_Update += 1;
	
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
	MB_Sleep(S_ChatTime*800);
	Scores::EndRound();
	SetTeamScoreToScoreboard();
	SortScoreboard();
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Manual;
	MB_Sleep(S_ChatTime*200);
}else{
	MB_Private_SectionValid_Turn = True;
}
***

***Match_EndMap***
***
log("Match_EndMap");

if(MB_Private_SectionValid_Map){

	if(MB_GetValidMapCount() == S_MapsPerMatch){
		MB_StopMatch();
	}
	
	if (MB_MatchIsRunning()){
		MB_SkipPodiumSequence();
	} else {
			//sort teams by point
		//		  Points [teamIndex]
		declare Integer[Integer] LUT = [];
		for (I, 0, 12) {
			LUT[I] = -1;
		}
		foreach(I => Team in RMXTeams::Get()){
			LUT[I] = Team.Score;
		}
		LUT = LUT.sort();
		//			teamindex
		declare Integer[] LUT2 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];
		declare Integer I;
		foreach(TeamIndex => Score in LUT){
			if(I < LUT2.count){
				LUT2[I] = TeamIndex;
			}else{
				LUT2.add(TeamIndex);
			}
			I += 1;
		}

		declare RMXTeams::K_Team[] Serv1 = [RMXTeams::GetOrEmpty(LUT2[0]),RMXTeams::GetOrEmpty(LUT2[3]),RMXTeams::GetOrEmpty(LUT2[4]),RMXTeams::GetOrEmpty(LUT2[7]),RMXTeams::GetOrEmpty(LUT2[8]),RMXTeams::GetOrEmpty(LUT2[11])];
		declare RMXTeams::K_Team[] Serv2 = [RMXTeams::GetOrEmpty(LUT2[1]),RMXTeams::GetOrEmpty(LUT2[2]),RMXTeams::GetOrEmpty(LUT2[5]),RMXTeams::GetOrEmpty(LUT2[6]),RMXTeams::GetOrEmpty(LUT2[9]),RMXTeams::GetOrEmpty(LUT2[10])];

		log("!!RMX_QualificationResultServer1 :"^Serv1.tojson());
		log("!!RMX_QualificationResultServer2 :"^Serv2.tojson());
		XmlRpc::SendCallback(C_Callback_Teams_Serv1,Serv1.tojson());
		XmlRpc::SendCallback(C_Callback_Teams_Serv2,Serv2.tojson());
		

		SortScoreboard();
		Race::SortScores(Race::C_Sort_TotalPoints);
		Scores::SetPlayerWinner(Scores[0]);		

		declare netwrite RMXTeams::K_Team[] Net_RMX_Seeding_Teams_Serv1 for Teams[0] = [];
		Net_RMX_Seeding_Teams_Serv1 = Serv1;

		declare netwrite RMXTeams::K_Team[] Net_RMX_Seeding_Teams_Serv2 for Teams[0] = [];
		Net_RMX_Seeding_Teams_Serv2 = Serv2;

		declare netwrite Integer Net_RMX_Seeding_Upper_Ranking_Update for Teams[0] = 0;

		Net_RMX_Seeding_Upper_Ranking_Update = -2;

		MB_Sleep(60000);
		MB_StopMatch();
	}
}else{
	MB_SkipPodiumSequence();
	MB_Private_SectionValid_Round = True;
	MB_Private_SectionValid_Turn = True;
}
***

***Match_BeforePodiumSequence***
***
if(!MB_Private_SkipPodiumSequence){
	ModeUtils::PlaySound(CUIConfig::EUISound::EndRound, 0);
	
	declare CSmScore WinnerScore <=> Scores::GetPlayerWinner();
	if (WinnerScore == Null) {
		UIModules_BigMessage::SetMessage(_("|Match|Draw"));
	} else {
		declare Team = RMXTeams::Get(WinnerScore.User);
		UIModules_BigMessage::SetMessage(RMXTeams::Tag(Team)^" wins the match!");
	}
}
***

***Match_AfterPodiumSequence***
***
UIModules_BigMessage::SetMessage("");
***

***Match_EndMatch***
***
log("Match_EndMatch");
if(MB_Private_SectionValid_Match){

}else{
	MB_Private_SectionValid_Match = True;
	MB_Private_SectionValid_Round = True;
	MB_Private_SectionValid_Turn = True;
}
***


Text[] GetAllAssets() {
    declare Text[] Assets = [
        C_ImageURL_LocalRecords,
        C_ImageURL_LiveRanking,
        C_ImageURL_FondLiveRanking,
        C_ImageURL_NextPlayer,
        C_ImageURL_FondTeams,
        C_ImageURL_TextTeams,
        C_ImageURL_FondLapsCP,
        C_ImageURL_TextLaps,
        C_ImageURL_TextCps,
        C_ImageURL_UpperImage,
        C_ImageURL_FondLocalRecords
    ];

    return Assets;
}

Void SetMl() {

	declare Text Quads;
    foreach (Asset in GetAllAssets()) {
        Quads ^= """<quad image="{{{Asset}}}" hidden=1 size="0 0"/>""";
    }

	declare Text FrameInstances;
    for (I, 0, 5) {
        FrameInstances ^= """<frameinstance pos="0 {{{ -2 - (I * 10)}}}}" modelid="model-player"/>""";
    }

	for (I, 0, 5) {
        FrameInstances ^= """<frameinstance pos="94.5 {{{ -2 - (I * 10)}}}}" modelid="model-player"/>""";
    }

	declare Text MLText = """
	<manialink version="3" name="RMX_Seeding">
		<framemodel id="model-local-records">
			<quad pos="14 5" z-index="0" size="196 24" opacity="1" image="{{{C_ImageURL_LocalRecords}}}" scale=".2"/>
			<quad pos="-0.4 0" z-index="0" size="0.5 49.2" bgcolor="FF6C00" opacity="1"/>
			<quad pos="0 0" z-index="0" size="272 246" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_FondLocalRecords}}}" scale=".2"/>
			<quad id="quad-bg-locs-separator" pos="4 -31.3" z-index="0" size="47 0.2" bgcolor="FF6C00" opacity="1" hidden="1"/>
			<frame id="frame-liveranking-team">
				<frameinstance pos="7 -2" modelid="model-team-ranks"/>
				<frameinstance pos="7 -7" modelid="model-team-ranks"/>
				<frameinstance pos="7 -12" modelid="model-team-ranks"/>
				<frameinstance pos="7 -17" modelid="model-team-ranks"/>
				<frameinstance pos="7 -22" modelid="model-team-ranks"/>
				<frameinstance pos="7 -27" modelid="model-team-ranks"/>
				<frameinstance pos="7 -32" modelid="model-team-ranks"/>
				<frameinstance pos="7 -37" modelid="model-team-ranks"/>
				<frameinstance pos="7 -42" modelid="model-team-ranks"/>
			</frame>
		</framemodel>
		<framemodel id="model-live-ranking">
			<quad pos="19.6 5" z-index="0" size="167 24" opacity="1" image="{{{C_ImageURL_LiveRanking}}}" scale=".2"/>
			<quad pos="0 0" z-index="0" size="272 189.6" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_FondLiveRanking}}}" scale=".2"/>
			<quad pos="-0.4 0" z-index="0" size="0.5 38" bgcolor="FF6C00" opacity="1"/>
			<quad id="quad-bg-points-separator" pos="4 -21.5" z-index="0" size="46.5 0.2" bgcolor="FF6C00" opacity="1" hidden="1"/>
			<frame id="frame-liveranking-team">
				<frameinstance pos="7 -2" modelid="model-team-ranking"/>
				<frameinstance pos="7 -7" modelid="model-team-ranking"/>
				<frameinstance pos="7 -12" modelid="model-team-ranking"/>
				<frameinstance pos="7 -17" modelid="model-team-ranking"/>
				<frameinstance pos="7 -22" modelid="model-team-ranking"/>
				<frameinstance pos="7 -27" modelid="model-team-ranking"/>
				<frameinstance pos="7 -32" modelid="model-team-ranking"/>
			</frame>
		</framemodel>
		<framemodel id="model-team-ranks">
			<label id="label-players-position" pos="0 0" z-index="0" size="20 5" textcolor="ffffffff" text="" textfont="RajdhaniMono"  halign="right" opacity="1" textsize="2.5"/>
			<label id="label-players-name" pos="1 0" z-index="0" size="31 4.2" textcolor="ffffffff" text="" textsize="2.5" textfont="RajdhaniMono" opacity=".85" halign="left"/>
			<label id="label-team-first-attribute" pos="45 0" z-index="0" size="20 5" text="" textfont="RajdhaniMono"  halign="right" opacity=".85" textsize="2.5"/>
		</framemodel>
		<framemodel id="model-team-ranking">
			<label id="label-players-position" pos="0 0" z-index="0" size="20 5" textcolor="ffffffff" text="" textfont="RajdhaniMono"  halign="right" opacity="1" textsize="2.5"/>
			<label id="label-players-name" pos="1 0" z-index="0" size="31 4.2" textcolor="ffffffff" text="" textsize="2.5" textfont="RajdhaniMono" opacity=".85" halign="left"/>
			<label id="label-team-first-attribute" pos="45 0" z-index="0" size="20 5" text="" textfont="RajdhaniMono"  halign="right" opacity=".85" textsize="2.5"/>
		</framemodel>
		<framemodel id="model-teams-ranks">
			<quad scriptevents="1" id="quad-teams-rank" pos="0 1" z-index="-1" size="30 5" bgcolor="FFFFFF" opacity="1"/>
			<label id="label-players-position" pos="-1 0" z-index="0" size="20 5" textcolor="777777" text="" textfont="RajdhaniMono"  halign="right" opacity="1" textsize="2.5"/>
			<label id="label-players-name" pos="0 0" z-index="0" size="31 4.2" textcolor="333333" text="" textsize="2.5" textfont="RajdhaniMono" opacity=".85" halign="left"/>
			<label id="label-team-first-attribute" pos="39.45 0" z-index="0" size="20 5" text="" textfont="RajdhaniMono"  halign="right" opacity="1" textsize="2.5"/>
			<label id="label-team-second-attribute" pos="48.5 0" z-index="0" size="20 5" text="" textfont="RajdhaniMono"  halign="right" opacity=".75" textsize="2.5"/>
			<quad pos="-2 1.28" z-index="0" size="6 .18" bgcolor="FF6c00" opacity="1"/>
		</framemodel>
		<framemodel id="model-teams-up">
			<frame id="frame-player-attributes">
				<label id="label-players-tagpoints" pos="21 -3" z-index="0" size="20 5" textcolor="FFFFFFFF" text="---  0" textfont="RajdhaniMono"  halign="right" opacity="1" textsize="2.8"/>
				<label id="label-players-pts" pos="25.6 -4.3" z-index="0" size="31 4.2" textcolor="FFFFFFFF" text="PTS" textsize="1" textfont="RajdhaniMono" opacity="1" halign="right"/>
			</frame>
			<quad id="quad-up-separator" pos="32 -2.8" z-index="0" size=".2 4" bgcolor="FF6c00" opacity="1"/>
		</framemodel>
		<framemodel id="model-next-player">
			<quad pos="3 0" z-index="0" size="121 15" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_NextPlayer}}}" scale=".18"/>
			<quad pos="0 -3.5" z-index="0" size="36 9" bgcolor="000" opacity="0.3"/>
			<label id="label-next-player" pos="3 -5.8" z-index="0" size="30 5" text="" textfont="RajdhaniMono"/>
		</framemodel>
		<framemodel id="model-select-order">
			<quad pos="0 0" z-index="0" size="134 33" bgcolor="FFF" opacity="0.5"/>
			<label pos="67 -3.3" z-index="0" size="100 5" text="SELECT PLAYING ORDER" textfont="RajdhaniMono" textcolor="FF6c00" halign="center" textsize="3.5"/>
			<quad id="quad-order-first" scriptevents="1" pos="4.5 -11.5" z-index="0" size="38 10" bgcolor="000" opacity="1"/>
			<quad id="quad-order-second" scriptevents="1" pos="46.5 -11.5" z-index="0" size="39 10" bgcolor="000" opacity="1"/>
			<quad id="quad-order-third" scriptevents="1" pos="90.5 -11.5" z-index="0" size="39 10" bgcolor="000" opacity="1"/>
			<quad id="quad-order-reset" scriptevents="1" pos="23 -24" z-index="0" size="27 6" bgcolor="AF1415" opacity="1"/>
			<quad id="quad-order-randomize" scriptevents="1" pos="53 -24" z-index="0" size="27 6" bgcolor="FF7301" opacity="1"/>
			<quad id="quad-order-apply" scriptevents="1" pos="83 -24" z-index="0" size="27 6" bgcolor="2E7624" opacity="1"/>
			<label id="label-order-reset" pos="32.2 -25.36" z-index="0" size="20 5" text="RESET" textfont="RajdhaniMono" textsize="1.5"/>
			<label id="label-order-randomize" pos="58 -25.36" z-index="0" size="20 5" text="RANDOMISE" textfont="RajdhaniMono" textsize="1.5"/>
			<label id="label-order-apply" pos="91.9 -25.36" z-index="0" size="20 5" text="APPLY" textfont="RajdhaniMono" textsize="1.5"/>
			<label id="label-order-first" pos="24 -14.2" halign="center" z-index="0" size="38 5" text="PLAY FIRST" textfont="RajdhaniMono"/>
			<label id="label-order-second" pos="66 -14.2" halign="center" z-index="0" size="38 5" text="PLAY SECOND" textfont="RajdhaniMono"/>
			<label id="label-order-third" pos="110 -14.2" halign="center" z-index="0" size="38 5" text="PLAY THIRD" textfont="RajdhaniMono"/>
		</framemodel>
		<framemodel id="model-teams-ranking">
			<frame id="frame-teams-ranks">
				<frameinstance modelid="model-teams-ranks" pos="6 -10" z-index="2"/>
				<frameinstance modelid="model-teams-ranks" pos="6 -15.8" z-index="2"/>
				<frameinstance modelid="model-teams-ranks" pos="6 -21.6" z-index="1"/>
				<frameinstance modelid="model-teams-ranks" pos="6 -27.4" z-index="1"/>
				<frameinstance modelid="model-teams-ranks" pos="6 -33.2" z-index="1"/>
				<frameinstance modelid="model-teams-ranks" pos="6 -39" z-index="1"/>
				<frameinstance modelid="model-teams-ranks" pos="6 -44.8" z-index="1"/>
				<frameinstance modelid="model-teams-ranks" pos="6 -50.6" z-index="1"/>
			</frame>
			<quad id="quad-bg-teams-separator" pos="4 -37.7" z-index="0" size="28 0.2" bgcolor="FF6C00" opacity="1" hidden="1"/>
			<quad pos="0 0" z-index="0" size="214 52" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_FondTeams}}}" scale=".17"/>
			<quad pos="9.6 -2.3" z-index="0" size="99 23" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_TextTeams}}}"  scale=".17"/>
			<frame id="frame-teams-hideable" hidden="0">
				<quad pos="36.5 -8.2" z-index="0" size="20 48.1" bgcolor="FFF" opacity=".5" image="{{{C_ImageURL_FondLapsCP}}}"/>
				<quad pos="38 -4.4" z-index="0" size="49 15" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_TextLaps}}}" scale=".15"/>
				<quad pos="48.5 -4.4" z-index="0" size="37 15" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_TextCps}}}" scale=".15"/>
				<quad pos="36.5 -8" z-index="0" size="20 1.2" bgcolor="D06311FF" opacity="1"/>
			</frame>
			<quad pos="0 -8" z-index="0" size="36.5 1.2" bgcolor="FF6c00" opacity="1"/>
			<quad pos="0 -9.2" z-index="-1" size="36.5 47" bgcolor="FFF" opacity="1"/>
			<quad id="quad-arrow-display" pos="36.4 0.1" z-index="0" size="4 4" bgcolor="FFF" opacity="1" style="SliderVolume" substyle="DoubleArrowLeftSlim_light" scriptevents="1"/>
		</framemodel>
		<framemodel id="model-upper-ranking">
			<quad pos="0 0" z-index="0" size="1193 55" bgcolor="FFF" opacity="1" image="{{{C_ImageURL_UpperImage}}}" scale=".16"/>
			<quad pos="0 -8.9" z-index="0" size="190.88 .8" bgcolor="FFF" opacity="1"/>
			<quad pos="0 0" z-index="0" size=".8 9.7" bgcolor="FF6c00" opacity="1"/>
			<frame id="frame-teams-ranks">
				<frameinstance modelid="model-teams-up"/>
				<frameinstance modelid="model-teams-up"  pos="32"/>
				<frameinstance modelid="model-teams-up"  pos="63.7"/>
				<frameinstance modelid="model-teams-up"  pos="95.2"/>
				<frameinstance modelid="model-teams-up"  pos="126.7"/>
				<frameinstance modelid="model-teams-up"  pos="158.6"/>
			</frame>
		</framemodel>
		<framemodel id="model-player">
			<label id="label-player" pos="-28.7 23.6" z-index="0" size="94 5" textfont="RajdhaniMono" halign="center" opacity="1" textsize="5.5" text="myLabel" textcolor="000000FF"/>
		</framemodel>
		<framemodel id="frame-endmatch">
			<quad pos="-75 40.6" z-index="-1" size="187 95.6"  opacity="1"  bgcolor="FFFFFFFF"/>
			<quad pos="-76 55" z-index="-1" size="1 110"  opacity="1"  bgcolor="FF6c00"/>
			<quad pos="-75 55" z-index="0" size="187 15"  opacity="1" image="https://i.imgur.com/WpYVfXv.png"/>
			<quad pos="18.5 23" z-index="1" size="0.6 60" bgcolor="000000" opacity="0.6"/>
			
			<quad pos="80 -32" z-index="0" size="30 30" opacity="1" image="https://i.imgur.com/0Fi4ya7.png"/>
			
			
			<label pos="-28.7 35" z-index="0" size="94 50" text="Server 1" textfont="RajdhaniMono"  halign="center" opacity="0.6" textsize="8" textcolor="000000FF"/>
			<label pos="66 36.1" z-index="0" size="94 50" text="Server 2" textfont="RajdhaniMono"  halign="center" opacity="0.6" textsize="8" textcolor="000000FF"/>


			<frame id="player-rankings">
				{{{FrameInstances}}}
			</frame>
		</framemodel>
	
		<frame id="frame-global" pos="0 0" hidden="0" >
			<frameinstance id="frame-local-records" modelid="model-local-records" pos="105.5 53"/>
			<frameinstance id="frame-live-ranking" modelid="model-live-ranking" pos="105.5 -30"/>
			<frameinstance id="frame-next-player" modelid="model-next-player" hidden="1" pos="-160 50"/>
			<frameinstance id="frame-upper-ranking" modelid="model-upper-ranking" pos="-95.5 90"/>
			<frameinstance id="frame-teams-rankings" modelid="model-teams-ranking" pos="-160 10"/>
		</frame>

		{{{Quads}}}
		<frameinstance id="frame-select-order" modelid="model-select-order" pos="-68 33" hidden="1"/>
		<frameinstance id="frame-endmatch-ranking" modelid="frame-endmatch" pos ="-16.5 0" hidden="1" scale="0.9"/>

	<script><!--

		#Include "TextLib" as TL
		#Include "MathLib" as ML

		#Const C_AttachId {{{dump(C_ML_RMX_Seeding)}}}
		#Const C_MaxLocalRecordsNumberOfLines 9
		#Const C_MaxTeamsRankingNumberOfLines 8
		#Const C_MaxLiveRankingNumberOfLines 7
		#Const C_MaxNumberBefore 1
		#Const C_MaxNumberAfter 1
	
		{{{dumptype(RMXTeams::K_Player)}}}
		{{{dumptype(RMXTeams::K_Team)}}}
		{{{dumptype(RMXTeams::K_Config)}}}



		Integer GetTeamNbFinish(K_Team _Team){
			declare Ret = 0;
			foreach(Player in _Team.Players){
				if(Player.Finished) Ret += 1;
			}
			return Ret;
		}

		CSmPlayer GetPlayer(Text _Login) {
			foreach (Player in Players) {
				if (Player.User.Login == _Login) return Player;
			}
			return Null;
		}

		Boolean InputPlayerIsSpectator() {
			if (GUIPlayer != Null && InputPlayer != Null && GUIPlayer.User.Login == InputPlayer.User.Login) return False;
			return True;
		}

		Boolean IsRegistered(CUser _User){
			declare netread K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0];

			foreach(I => Team in Net_RMX_Seeding_Teams_Config){
				foreach(J => Player in Team.Players){
					if(Player.Login == _User.Login){
						return True;
					}
				}
			}
			return False;
		}

		Integer GetPlayerBestRaceTime(CSmScore _Score) {
			if (_Score == Null || _Score.BestRaceTimes.count <= 0) return -1;
			return _Score.BestRaceTimes[_Score.BestRaceTimes.count-1];
		}


		Text[Text] SortScoresByTime() {
			declare Integer[Text] LocalRecords = [];
			foreach (Score in Scores) {
				if (GetPlayerBestRaceTime(Score) > 0) {
				LocalRecords[Score.User.Name] = GetPlayerBestRaceTime(Score);
				}
			}

			LocalRecords = LocalRecords.sort();

			declare Text[Text] TextLocalRecords;
			foreach (Key => Value in LocalRecords) {
				TextLocalRecords[Key] = TL::ToText(Value);
			}

			return TextLocalRecords;
		}

		Boolean TrySpectateLogin(Text _Login) {
			declare Player <=> GetPlayer(_Login);
			if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) return False;

			ClientUI.Spectator_SetForcedTarget_Clear();
			SetSpectateTarget(_Login);
			Playground.SetWantedSpectatorCameraType(CPlaygroundClient::ESpectatorCameraType::Replay);

			return True;
		}
		
		
		K_Team GetTeamFromUser(CUser _User){
			declare netread K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0];

			foreach(I => Team in Net_RMX_Seeding_Teams_Config){
				foreach(J => Player in Team.Players){
					if(Player.Login == _User.Login){
						return Team;
					}
				}
			}
			return K_Team{};
		}

		K_Team GetTeamFromTeamName(Text _TeamName){
			declare netread K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0];

			foreach(I => Team in Net_RMX_Seeding_Teams_Config){
				if(Team.Name == _TeamName){
					return Team;
				}
			}
			return K_Team{};
		}

		Void UpdateRankingPlayer(CMlControl _Control_Player, Text[] _PlayerState, Integer _Index) {

			if (!_PlayerState.existskey(1) || !_PlayerState.existskey(0)) return;
			declare netread K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0];

			declare CMlFrame Frame_Player <=> (_Control_Player as CMlFrame);
			declare CMlQuad Quad_Player <=> (Frame_Player.GetFirstChild("quad-teams-rank") as CMlQuad);
			declare CMlLabel Label_Player_Position <=> (Frame_Player.GetFirstChild("label-players-position") as CMlLabel);
			declare CMlLabel Label_Team_Name <=> (Frame_Player.GetFirstChild("label-players-name") as CMlLabel);
			declare CMlLabel Label_Team_FirstAtt <=> (Frame_Player.GetFirstChild("label-team-first-attribute") as CMlLabel);

			//laps et cp
			if (TL::Find(",", _PlayerState[1], True, True)) {
				declare Text[] TeamCP = TL::Split(",", _PlayerState[1]);
				declare CMlLabel Label_Team_Cps <=> (Frame_Player.GetFirstChild("label-team-second-attribute") as CMlLabel);

				if (GUIPlayer != Null && IsRegistered(GUIPlayer.User)) {
					declare Text RMX_TeamName for Quad_Player = "";
					RMX_TeamName = _PlayerState[0];
					declare GUITeam = GetTeamFromUser(GUIPlayer.User);
					declare Team = GetTeamFromTeamName(_PlayerState[0]);
					if (GetTeamNbFinish(Team) < 3) { //team not finished

						Label_Player_Position.Value = TL::ToText(_Index);
						Label_Team_Name.Value = _PlayerState[0];
						Label_Team_FirstAtt.Value = TeamCP[0]; //Laps
						Label_Team_Cps.Value = TeamCP[1];

					} else
					if (Label_Team_FirstAtt.Value != "") { 
						Label_Player_Position.Value = TL::ToText(_Index);
						Label_Team_Name.Value = Team.Name;
						Label_Team_FirstAtt.Value = "";
						Label_Team_Cps.Value = "$f00Finished";
						Label_Team_Cps.TextSizeReal = 2.;
						Label_Team_Cps.Opacity = 0.;
						Label_Team_Cps.RelativePosition_V3.X = 45.;

						AnimMgr.Flush(Label_Team_Cps);
						AnimMgr.Add(Label_Team_Cps, "<a pos=\"48.75 0.\" opacity=.9/>", 600, CAnimManager::EAnimManagerEasing::QuadInOut);
					}
					
					if (GUITeam.Name == Label_Team_Name.Value) Label_Team_Name.TextColor = <0.,.0,.0>;
					else Label_Team_Name.TextColor = <.2,.2,.2>;

				}

			} else if (TL::EndsWith(":",_PlayerState[1])) { //live ranking ?
				declare Text TeamPoints = TL::SubText(_PlayerState[1], 0, TL::Length(_PlayerState[1]) - 1);
				Label_Player_Position.Value = TL::ToText(_Index);
				Label_Team_FirstAtt.Value = TeamPoints;
				Label_Team_Name.Value = _PlayerState[0];
			}
			else {
				declare CMlLabel Label_Player_Time <=> (Frame_Player.GetFirstChild("label-players-time") as CMlLabel);

				Label_Player_Position.Value = TL::ToText(_Index);
				Label_Team_Name.Value = _PlayerState[0];
				Label_Team_FirstAtt.Value = TL::TimeToText(TL::ToInteger(_PlayerState[1]),True,True); //time
			} 
		}

		Void UpdateSpecificRanking(Text _TypeOfRanking) {
			declare Text[Text] RankingRecords;
			declare Integer MaxNumberOfLines = C_MaxLocalRecordsNumberOfLines;
			declare Text CompareData = InputPlayer.Score.User.Name;	

			declare CMlFrame Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
			declare CMlFrame Frame_LocalRecords <=> (Frame_Global.GetFirstChild("frame-local-records") as CMlFrame);
			declare CMlFrame Frame_Ranking <=> (Frame_LocalRecords.GetFirstChild("frame-liveranking-team") as CMlFrame);

			if (_TypeOfRanking == "LocalRecords") {
				declare Text[Text] LocalRecords;

				Frame_LocalRecords <=> (Frame_Global.GetFirstChild("frame-local-records") as CMlFrame);
				Frame_Ranking <=> (Frame_LocalRecords.GetFirstChild("frame-liveranking-team") as CMlFrame);

				LocalRecords = SortScoresByTime();
				RankingRecords = LocalRecords;

				MaxNumberOfLines = C_MaxLocalRecordsNumberOfLines;
			}

			if (_TypeOfRanking == "TeamsRanking") {
				declare netread K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0];
				declare Text[Text] TeamRankingRecords;

				declare CMlFrame Frame_TeamsRanking <=> (Frame_Global.GetFirstChild("frame-teams-rankings") as CMlFrame);
				Frame_Ranking <=> (Frame_TeamsRanking.GetFirstChild("frame-teams-ranks") as CMlFrame);

				foreach (Key => Team in Net_RMX_Seeding_Teams_Config) {
					TeamRankingRecords[Team.Name] = TL::ToText(Team.Laps) ^ "," ^ TL::ToText(Team.Checkpoints);
				}

				RankingRecords = TeamRankingRecords;
				MaxNumberOfLines = C_MaxTeamsRankingNumberOfLines;
				
				declare K_Team Team;
				if (GUIPlayer != Null && IsRegistered(GUIPlayer.User)) {
					Team = GetTeamFromUser(GUIPlayer.User);
					CompareData = Team.Name;
				}
			}

			if (_TypeOfRanking == "LiveRanking") {
				declare netread K_Team[] Net_RMX_Seeding_Teams_Config_SortedPoints for Teams[0];
				declare Text[Text] LiveRankingRecords;

				declare CMlFrame Frame_LiveRanking <=> (Frame_Global.GetFirstChild("frame-live-ranking") as CMlFrame);
				Frame_Ranking <=> (Frame_LiveRanking.GetFirstChild("frame-liveranking-team") as CMlFrame);

				foreach (Key => Team in Net_RMX_Seeding_Teams_Config_SortedPoints) {
					LiveRankingRecords[Team.Name] = TL::ToText(Team.Score) ^ ":";
				}

				RankingRecords = LiveRankingRecords;
				MaxNumberOfLines = C_MaxLiveRankingNumberOfLines;

				declare K_Team Team;
				if (GUIPlayer != Null && IsRegistered(GUIPlayer.User)) {
					Team = GetTeamFromUser(GUIPlayer.User);
					CompareData = Team.Name;
				}
			}

			declare Integer Index = 0;
            declare Integer NumberOfLinesUpdated;
            declare Integer NumberOfLinesInTheTop = MaxNumberOfLines - (C_MaxNumberBefore + C_MaxNumberAfter + 1);
            declare CSmPlayer FirstPlayer;
			declare Text[][] BeforePlayers; // List of the C_MaxNumberBefore + C_MaxNumberAfter N players before GUIPlayer
            declare Boolean GUIPlayerIsPassed = False;
			declare Boolean SeparatorIsNeeded;
			
			declare Integer RecordsIndex = 0;

			foreach (PlayerLogin => PlayerValue in RankingRecords) {
				RecordsIndex += 1;
				declare Text[] PlayerState = [PlayerLogin, PlayerValue];


				// Define if need to display
				if (NumberOfLinesUpdated < MaxNumberOfLines) {

					if (NumberOfLinesInTheTop > NumberOfLinesUpdated || InputPlayer == Null || GUIPlayerIsPassed ||(!RankingRecords.existskey(CompareData))) {
						UpdateRankingPlayer(Frame_Ranking.Controls[NumberOfLinesUpdated], PlayerState, RecordsIndex);
						NumberOfLinesUpdated += 1;
						if (GUIPlayer != Null && PlayerState[0] == CompareData) GUIPlayerIsPassed = True;
					} else {
						if (PlayerState[0] == CompareData) {
							declare Integer IndexOffset;
							while (BeforePlayers.count > C_MaxNumberBefore && RecordsIndex + IndexOffset + C_MaxNumberAfter <= RankingRecords.count - 1) {
								BeforePlayers = BeforePlayers.slice(1);
								IndexOffset += 1;
							}
							while (BeforePlayers.count > 0) {
								RecordsIndex += 1;
								UpdateRankingPlayer(Frame_Ranking.Controls[NumberOfLinesUpdated], BeforePlayers[0], RecordsIndex);
								NumberOfLinesUpdated += 1;
								BeforePlayers = BeforePlayers.slice(1);
							}
							RecordsIndex += 1;
							UpdateRankingPlayer(Frame_Ranking.Controls[NumberOfLinesUpdated], PlayerState, RecordsIndex);
							NumberOfLinesUpdated += 1;
							GUIPlayerIsPassed = True;

							if (RecordsIndex > NumberOfLinesInTheTop + C_MaxNumberBefore) SeparatorIsNeeded = True;

						} else {
							BeforePlayers.add(PlayerState);
							if (BeforePlayers.count > C_MaxNumberBefore + C_MaxNumberAfter) {
								BeforePlayers = BeforePlayers.slice(1);
							}
						}
					}
				}
			}
			if (_TypeOfRanking == "TeamsRanking") {
				declare CMlQuad Quad_Bg_Separator <=> (Page.GetFirstChild("quad-bg-teams-separator") as CMlQuad);
				Quad_Bg_Separator.Visible = SeparatorIsNeeded;	
			}
			else if (_TypeOfRanking == "LiveRanking") {
				declare CMlQuad Quad_Bg_Separator <=> (Page.GetFirstChild("quad-bg-points-separator") as CMlQuad);
				Quad_Bg_Separator.Visible = SeparatorIsNeeded;	
			} 
			else if (_TypeOfRanking == "LocalRecords") {
				declare CMlQuad Quad_Bg_Separator <=> (Page.GetFirstChild("quad-bg-locs-separator") as CMlQuad);
				Quad_Bg_Separator.Visible = SeparatorIsNeeded;	
			}

		}

		Void UpdatePointsRanking() {
			declare netread K_Team[] Net_RMX_Seeding_Teams_Config_SortedPoints for Teams[0];

			declare CMlFrame Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
			declare CMlFrame Frame_UpperRanking <=> (Frame_Global.GetFirstChild("frame-upper-ranking") as CMlFrame);
			declare CMlFrame Frame_TeamsRanking_Teams <=> (Frame_UpperRanking.GetFirstChild("frame-teams-ranks") as CMlFrame);
			declare CMlFrame Frame_LiveRanking <=> (Frame_Global.GetFirstChild("frame-live-ranking") as CMlFrame);
			declare CMlFrame Frame_TeamsLiveRanking_Teams <=> (Frame_LiveRanking.GetFirstChild("frame-liveranking-team") as CMlFrame);

			//teams upper panel
			foreach (Key => Control in Frame_TeamsRanking_Teams.Controls) {
				if (!Net_RMX_Seeding_Teams_Config_SortedPoints.existskey(Key)) break;

				declare CMlFrame Frame <=> (Control as CMlFrame);
				declare CMlFrame Frame_Player_Attr <=> (Frame.GetFirstChild("frame-player-attributes") as CMlFrame);
				declare CMlLabel Label_Player_TagPoints <=> (Frame_Player_Attr.GetFirstChild("label-players-tagpoints") as CMlLabel);

				Label_Player_TagPoints.Value = Net_RMX_Seeding_Teams_Config_SortedPoints[Key].Trigram ^ "  " ^ TL::ToText(Net_RMX_Seeding_Teams_Config_SortedPoints[Key].Score);
			}

			UpdateSpecificRanking("LiveRanking");
		}

		Void UpdateRankings() {
			declare netread K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0];
			if(Net_RMX_Seeding_Teams_Config == []) return;

			declare CMlFrame Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
			declare CMlFrame Frame_LocalRecords <=> (Frame_Global.GetFirstChild("test") as CMlFrame);
			declare CMlFrame Frame_LiveRanking <=> (Frame_Global.GetFirstChild("model-live-ranking") as CMlFrame);
			declare CMlFrame Frame_TeamsRanking <=> (Frame_Global.GetFirstChild("frame-teams-rankings") as CMlFrame);
			declare CMlFrame Frame_UpperRanking <=> (Frame_Global.GetFirstChild("frame-upper-ranking") as CMlFrame);
			declare CMlFrame Frame_NextPlayer <=> (Frame_Global.GetFirstChild("frame-next-player") as CMlFrame);

			UpdateSpecificRanking("TeamsRanking");
		}

		Void DynaMLSetup() {
			declare CMlFrame Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
			declare CMlFrame Frame_TeamsRanking <=> (Frame_Global.GetFirstChild("frame-teams-rankings") as CMlFrame);
			declare CMlFrame Frame_TeamsRanking_Teams <=> (Frame_TeamsRanking.GetFirstChild("frame-teams-ranks") as CMlFrame);
			declare CMlFrame Frame_UpperRanking <=> (Frame_Global.GetFirstChild("frame-upper-ranking") as CMlFrame);
			declare CMlFrame Frame_TeamsUpper <=> (Frame_UpperRanking.GetFirstChild("frame-teams-ranks") as CMlFrame);

			foreach (Key => Control in Frame_TeamsRanking_Teams.Controls) {
				if (Key > 2) break;
				declare CMlFrame Frame <=> (Control as CMlFrame);

				declare CMlLabel Label_Player_Position <=> (Frame.GetFirstChild("label-players-position") as CMlLabel);

				if (Key == 0) Label_Player_Position.TextColor = <0.,0.,0.>;
				if (Key == 1) Label_Player_Position.TextColor = <.15,.15,.15>;
				if (Key == 2) Label_Player_Position.TextColor = <.30,.30,.30>;
			}

			foreach (Key => Control in Frame_TeamsUpper.Controls reverse) {
				declare CMlFrame Frame <=> (Control as CMlFrame);
				declare CMlQuad Quad_Separator <=> (Frame.GetFirstChild("quad-up-separator") as CMlQuad);

				Quad_Separator.Visible = False;
				break;
			}
		}

		Void HideTeamsLapsCps(Boolean _Hide) {
			declare CMlFrame Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
			declare CMlFrame Frame_TeamsRanking <=> (Frame_Global.GetFirstChild("frame-teams-rankings") as CMlFrame);
			declare CMlFrame Frame_TeamsRanking_Teams <=> (Frame_TeamsRanking.GetFirstChild("frame-teams-ranks") as CMlFrame);

			foreach (Key => Control in Frame_TeamsRanking_Teams.Controls) {
				declare CMlFrame Frame <=> (Control as CMlFrame);

				declare CMlLabel Label_Team_Laps <=> (Frame.GetFirstChild("label-team-first-attribute") as CMlLabel);
				declare CMlLabel Label_Team_Cps <=> (Frame.GetFirstChild("label-team-second-attribute") as CMlLabel);

				Label_Team_Laps.Visible = !_Hide;
				Label_Team_Cps.Visible = !_Hide;
			}
		}

		Void UpdatePickerMenu() {
			declare netread K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0];
			if(Net_RMX_Seeding_Teams_Config == []) return;

			declare CMlFrame Frame_SelectOrder <=> (Page.GetFirstChild("frame-select-order") as CMlFrame);

			declare CMlLabel Label_First <=> (Frame_SelectOrder.GetFirstChild("label-order-first") as CMlLabel);
			declare CMlLabel Label_Second <=> (Frame_SelectOrder.GetFirstChild("label-order-second") as CMlLabel);
			declare CMlLabel Label_Third <=> (Frame_SelectOrder.GetFirstChild("label-order-third") as CMlLabel);

			foreach (Key => Team in Net_RMX_Seeding_Teams_Config) {
				if (InputPlayer != Null && IsRegistered(InputPlayer.User)) {
					declare Team = GetTeamFromUser(InputPlayer.User);

					if (Team.Players.count != 3) break;

					if (Team.Players[0].IsDisplayed == False) Label_First.Value = "...";
					else {
						declare CSmPlayer Player <=> GetPlayer(Team.Players[0].Login);
						if (Player == Null) continue;
						Label_First.Value = Player.Name;

					}

					if (Team.Players[1].IsDisplayed == False) Label_Second.Value = "...";
					else {
						declare CSmPlayer Player <=> GetPlayer(Team.Players[1].Login);
						if (Player == Null) continue;
						Label_Second.Value = Player.Name;

					}

					if (Team.Players[2].IsDisplayed == False) Label_Third.Value = "...";
					else {
						declare CSmPlayer Player <=> GetPlayer(Team.Players[2].Login);
						if (Player == Null) continue;
						Label_Third.Value = Player.Name;

					}
					
					break;
				}
			}
		}

		

		Void UpdateNextPlayerMenu(Text _NextPlayer) {
			declare netread K_Team[] Net_RMX_Seeding_Teams_Config for Teams[0];
			if(Net_RMX_Seeding_Teams_Config == []) return;

			declare CMlFrame Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
			declare CMlFrame Frame_NextPlayer <=> (Frame_Global.GetFirstChild("frame-next-player") as CMlFrame);

			declare CMlLabel Label_NextPlayer <=> (Frame_NextPlayer.GetFirstChild("label-next-player") as CMlLabel);

			if (_NextPlayer != "") {
				Frame_NextPlayer.Visible = True;
				Label_NextPlayer.Value = _NextPlayer;
			}
			else {
				Frame_NextPlayer.Visible = False;
			}

		}

		Void EndMatchScoresML() {
			
			declare netread K_Team[] Net_RMX_Seeding_Teams_Config_SortedPoints for Teams[0];

			declare netread K_Team[] Net_RMX_Seeding_Teams_Serv1 for Teams[0];
			declare netread K_Team[] Net_RMX_Seeding_Teams_Serv2 for Teams[0];

			declare CMlFrame Frame_TeamsEndRanking <=> (Page.GetFirstChild("frame-endmatch-ranking") as CMlFrame);
			declare CMlFrame Frame_PlayerRanking <=> (Frame_TeamsEndRanking.GetFirstChild("player-rankings") as CMlFrame);


			foreach (Key => Team in Net_RMX_Seeding_Teams_Serv1) {
				if (!Frame_PlayerRanking.Controls.existskey(Key)) break;

				declare CMlFrame Frame_ = Frame_PlayerRanking.Controls[Key] as CMlFrame;
				declare CMlFrame Frame = Frame_ as CMlFrame;

				declare CMlLabel Label_Players_Name <=> (Frame.GetFirstChild("label-player") as CMlLabel);

				Label_Players_Name.Value = Team.Name;
			}

			foreach (Key => Team in Net_RMX_Seeding_Teams_Serv2) {
				if (!Frame_PlayerRanking.Controls.existskey(Key + 6)) break;

				declare CMlFrame Frame_ = Frame_PlayerRanking.Controls[Key + 6] as CMlFrame;
				declare CMlFrame Frame = Frame_ as CMlFrame;

				declare CMlLabel Label_Players_Name <=> (Frame.GetFirstChild("label-player") as CMlLabel);

				Label_Players_Name.Value = Team.Name;
			}
		}

		main() {

			log("Init " ^ C_AttachId);

			declare CMlFrame Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
			declare CMlFrame Frame_PickOrder <=> (Page.GetFirstChild("frame-select-order") as CMlFrame);
			declare CMlFrame Frame_EndRanking <=> (Page.GetFirstChild("frame-endmatch-ranking") as CMlFrame);

			wait(InputPlayer != Null);

			declare netread Integer Net_RMX_Seeding_Ranking_Update for Teams[0] = 0;
			declare netread Integer Net_RMX_Seeding_Upper_Ranking_Update for Teams[0] = 0;
			declare netread Integer Net_RMX_Seeding_Display_HUD for Teams[0] = 0;
			declare netread Integer Net_RMX_Teams_Picking_Updates for Teams[0] = 0;
			declare netread Integer Net_RMX_LocalMapRecords_Update for Teams[0] = 0;
			declare netread Text Net_RMX_NextPlayer_Player for UI = "";
			declare netread Boolean Net_RMX_Teams_Picking_ApplyIsOver for UI = False;

			declare Integer Last_RMX_Seeding_Update = Net_RMX_Seeding_Ranking_Update;
			declare Integer Last_RMX_Seeding_Point_Update = Net_RMX_Seeding_Upper_Ranking_Update;
			declare Integer Last_RMX_Seeding_Display_HUD = -2;
			declare Integer Last_RMX_Teams_Picking_Updates = Net_RMX_Teams_Picking_Updates;
			declare Integer Last_RMX_LocalMapRecords_Update = Net_RMX_LocalMapRecords_Update;
			declare Text Last_RMX_NextPlayer_Player = Net_RMX_NextPlayer_Player;
			declare Ident Last_GUIPlayerId;
			declare Boolean Last_RMX_ApplyIsOver = False;

			log("Init " ^ C_AttachId ^ " " ^ Net_RMX_Seeding_Ranking_Update ^ " " ^ Last_RMX_Seeding_Update);

			DynaMLSetup();
			Frame_Global.Visible = True;
			
			while (True) {
				yield;
				if (Net_RMX_Seeding_Display_HUD != Last_RMX_Seeding_Display_HUD) {
					if (Net_RMX_Seeding_Display_HUD == 0) {
						Frame_Global.Visible = False;
						Frame_PickOrder.Visible = True;
						UpdatePickerMenu();
					}
					else if (Net_RMX_Seeding_Display_HUD == 1) {
						Frame_Global.Visible = True;
						Frame_PickOrder.Visible = False;
					}
					else {
						Frame_Global.Visible = False;
						Frame_PickOrder.Visible = False;
					}
					Last_RMX_Seeding_Display_HUD = Net_RMX_Seeding_Display_HUD;
				}

				if (Net_RMX_Seeding_Upper_Ranking_Update != Last_RMX_Seeding_Point_Update) {
					if (Net_RMX_Seeding_Upper_Ranking_Update == -2) {

						Frame_EndRanking.Visible = True;
						Frame_Global.Visible = False;

						AnimMgr.Add(Frame_EndRanking, "<a scale=1./>", 1000, CAnimManager::EAnimManagerEasing::QuadOut);

						EndMatchScoresML();
					} else {
					UpdatePointsRanking();
					}
					Last_RMX_Seeding_Point_Update = Net_RMX_Seeding_Upper_Ranking_Update;
				}

				if (Net_RMX_Seeding_Ranking_Update != Last_RMX_Seeding_Update || (GUIPlayer == Null && Last_GUIPlayerId != NullId) || (GUIPlayer != Null && Last_GUIPlayerId != GUIPlayer.Id)) {
                    UpdateRankings();
					UpdateSpecificRanking("LiveRanking");

			        if (GUIPlayer == Null) Last_GUIPlayerId = NullId;
					else Last_GUIPlayerId = GUIPlayer.Id;

					Last_RMX_Seeding_Update = Net_RMX_Seeding_Ranking_Update;
				}

				if (Net_RMX_Teams_Picking_Updates != Last_RMX_Teams_Picking_Updates) {

					UpdatePickerMenu();
					Last_RMX_Teams_Picking_Updates = Net_RMX_Teams_Picking_Updates;
				}


				if (Net_RMX_Teams_Picking_ApplyIsOver != Last_RMX_ApplyIsOver) {
					log("different on va ferme la page");
					if (Net_RMX_Teams_Picking_ApplyIsOver) {
						Frame_PickOrder.Visible = False;
					}
					Last_RMX_ApplyIsOver = Net_RMX_Teams_Picking_ApplyIsOver;
				}

				if (Net_RMX_LocalMapRecords_Update != Last_RMX_LocalMapRecords_Update) {
					
					UpdateSpecificRanking("LocalRecords");
					Last_RMX_LocalMapRecords_Update = Net_RMX_LocalMapRecords_Update;
				}

				if (Net_RMX_NextPlayer_Player != Last_RMX_NextPlayer_Player) {
					UpdateNextPlayerMenu(Net_RMX_NextPlayer_Player);
					Last_RMX_NextPlayer_Player = Net_RMX_NextPlayer_Player;
				}


				foreach(Event in PendingEvents) {
					if (Event.Control == Null) continue; 
					declare Quad <=> (Event.Control as CMlQuad);

					if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "quad-arrow-display") {
						declare CMlFrame Frame_Event <=> (Page.GetFirstChild("frame-teams-hideable") as CMlFrame);

						if (Frame_Event.Visible) {
							Frame_Event.Visible = False;
							Quad.Substyle = "DoubleArrowRightSlim_light";
							HideTeamsLapsCps(True);
						} else {
							Frame_Event.Visible = True;
							Quad.Substyle = "DoubleArrowLeftSlim_light";
							HideTeamsLapsCps(False);
						}					
					}
					if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "quad-order-randomize") { 
						log("Event " ^ Event.ControlId);
						SendCustomEvent("RMX_Order_Randomize",[]);
					}
					if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "quad-order-first") { 
						log("Event " ^ Event.ControlId);
						SendCustomEvent("RMX_Order_ChangeOrder",["0"]);
					}
					if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "quad-order-second") { 
						log("Event " ^ Event.ControlId);
						SendCustomEvent("RMX_Order_ChangeOrder",["1"]);
					}
					if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "quad-order-third") { 
						log("Event " ^ Event.ControlId);
						SendCustomEvent("RMX_Order_ChangeOrder",["2"]);
					}
					if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "quad-order-reset") { 
						log("Event " ^ Event.ControlId);
						SendCustomEvent("RMX_Order_Reset",[]);
					}
					if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "quad-order-apply") { 
						log("Event " ^ Event.ControlId);
						SendCustomEvent("RMX_Order_Apply",[]);
					}

					if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "quad-teams-rank" && InputPlayerIsSpectator()) {
						declare Text RMX_TeamName for Quad = "";
                   		if (RMX_TeamName == "") continue;
						log("Event " ^ Event.ControlId ^ RMX_TeamName);

						declare Team = GetTeamFromTeamName(RMX_TeamName);
						log(Team.Name);
						foreach (Player_ in Team.Players) {
							if (TrySpectateLogin(Player_.Login)) {
								break;
							}
						}

					}
				}
			}
		}


		--></script>
	</manialink>
	""";

	Layers::Create(C_ML_RMX_Seeding, MLText);
	Layers::SetType(C_ML_RMX_Seeding, CUILayer::EUILayerType::Normal);
	Layers::Attach(C_ML_RMX_Seeding);
}


Void UpdateScoresTableFooter(Boolean _IsWarmUp){
	declare Text[] Parts;
	declare Text Message = "";
	if(_IsWarmUp){
		declare netwrite Integer Net_LibRaceWarmUp_WarmUpDuration for Teams[0] = 0;
		Message ^= """$F92%{{{Parts.count + 1}}}{{{Net_LibRaceWarmUp_WarmUpDuration}}}/{{{S_WarmUpNb}}}""";
		//L16N [Rounds] Number of rounds played during the track.
		Parts.add(_("WarmUp")^" : ");

	}else if (S_RoundsPerMap > 0) {
		if (Parts.count > 0) Message ^= "\n";
		Message ^= """%{{{Parts.count + 1}}}{{{MB_Private_GetValidRoundCount()}}}/{{{S_RoundsPerMap}}}""";
		//L16N [Rounds] Number of rounds played during the track.
		Parts.add(_("Rounds : "));
	}
	
	if (S_MapsPerMatch > 0) {
		if (Parts.count > 0) Message ^= "\n";
		Message ^= """%{{{Parts.count + 1}}}{{{MB_Private_GetValidMapCount()}}}/{{{S_MapsPerMatch}}}""";
		//L16N [Rounds] Number of tracks played during the match.
		Parts.add(_("Tracks : "));
	}
	
	switch (Parts.count) {
		case 0: UIModules_ScoresTable::SetFooterInfo(Message);
		case 1: UIModules_ScoresTable::SetFooterInfo(TL::Compose(Message, Parts[0]));
		case 2: UIModules_ScoresTable::SetFooterInfo(TL::Compose(Message, Parts[0], Parts[1]));
		case 3: UIModules_ScoresTable::SetFooterInfo(TL::Compose(Message, Parts[0], Parts[1], Parts[2]));
	}
}

Void StartTeamPlayer(RMXTeams::K_Team _Team,Integer _PlayerIndex,Integer _StartTime){

	if( _PlayerIndex < 0 || _PlayerIndex >= _Team.Players.count) return;
	declare Player = GetPlayer(_Team.Players[_PlayerIndex].Login);
	if(Player != Null){

		Race::Start(Player,_StartTime);
		//set other players to spectate starting player
		foreach(Index => __ in _Team.Players){
			if(Index == _PlayerIndex) continue;
			declare Spectator = GetPlayer(_Team.Players[Index].Login);
			if(Spectator != Null){
				
				declare UI <=>  UIManager.GetUI(Spectator);
				if(UI != Null){
					UI.Spectator_SetAutoTarget_User(Player.User);
				}
			}
		}
	}
}

Void SetScoreboardDisplay(){
	declare Text[Text] CustomNames = [];
	declare Text[] Display;
	foreach(Score in Scores) {
		declare Text CustomName;

		declare Text PlayerName = "$<"^Score.User.Name^"$>";

		if(RMXTeams::IsRegistered(Score.User)){
			Display.add(Score.User.WebServicesUserId);
			declare Team = RMXTeams::Get(Score.User);
			if(Team.Players.count == 0){
				CustomName = PlayerName;
			}else{
				CustomName = RMXTeams::Tag(Team)^" "^PlayerName;
			}
		}else{
			CustomName = PlayerName;
		}
		CustomNames[Score.User.WebServicesUserId] = CustomName;
	}
	UIModules_ScoresTable::DisplayOnly(Display);
	UIModules_ScoresTable::SetCustomNames(CustomNames);
}

Void SortScoreboard(){
	Scores_ClearAll();
	//		  Score   [TeamIndex]
	declare Integer[Integer] LUT;
	foreach(I => Team in RMXTeams::Get()){
		LUT[I] = Team.Score;
	}
	LUT = LUT.sort();
	declare TeamNb =  RMXTeams::Get().count;
	declare Integer I;
	foreach(TeamIndex => Score in LUT){
		declare Team = RMXTeams::Get(TeamIndex);
		foreach(J => Player in Team.Players){
			declare Score <=> RMXTeams::GetScore(Player.Login);
			if(Score != Null){
				Score.Points = (TeamNb-I)*10+(2-J);
			}
		}
		I +=1;
	}
}

Void SetTeamScoreToScoreboard(){
	declare Integer[Integer] LUT;
	foreach(I => Team in RMXTeams::Get()){
		LUT[I] = Team.Score;
	}
	LUT = LUT.sort();

	declare Text[][Text] CustomPoints;
	declare Integer I;
	foreach(TeamIndex => Score in LUT){
		declare Team = RMXTeams::Get(TeamIndex);
		foreach(J => Player in Team.Players){
			declare Score <=> RMXTeams::GetScore(Player.Login);
			if(Score != Null){
				CustomPoints[Score.User.WebServicesUserId] = [];
				CustomPoints[Score.User.WebServicesUserId].add(""^Team.Score);
				if(I < 10){
					CustomPoints[Score.User.WebServicesUserId].add("FFF");
				}else if(I < 12){
					CustomPoints[Score.User.WebServicesUserId].add("F80");
				}else{
					CustomPoints[Score.User.WebServicesUserId].add("F00");
				}
			}
		}
		I +=1;
	}
	UIModules_ScoresTable::SetCustomPoints(CustomPoints);
}

Void ResetTeamScoreToScoreboard(){
	UIModules_ScoresTable::SetCustomPoints([]);
}
